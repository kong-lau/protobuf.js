{"version":3,"sources":["lib/prelude.js","../node_modules/@protobufjs/aspromise/index.js","../node_modules/@protobufjs/base64/index.js","../node_modules/@protobufjs/codegen/index.js","../node_modules/@protobufjs/eventemitter/index.js","../node_modules/@protobufjs/fetch/index.js","../node_modules/@protobufjs/float/index.js","../node_modules/@protobufjs/inquire/index.js","../node_modules/@protobufjs/path/index.js","../node_modules/@protobufjs/pool/index.js","../node_modules/@protobufjs/utf8/index.js","../src/converter.js","../src/decoder.js","../src/encoder.js","../src/enum.js","../src/field.js","../src/index-light","../src/index-minimal.js","../src/mapfield.js","../src/message.js","../src/method.js","../src/namespace.js","../src/object.js","../src/oneof.js","../src/reader.js","../src/reader_buffer.js","../src/root.js","../src/roots.js","../src/rpc.js","../src/rpc/service.js","../src/service.js","../src/type.js","../src/types.js","../src/util.js","../src/util/longbits.js","../src/util/minimal.js","../src/verifier.js","../src/wrappers.js","../src/writer.js","../src/writer_buffer.js"],"names":["undefined","modules","cache","entries","protobuf","1","require","module","exports","fn","ctx","params","Array","arguments","length","offset","index","pending","Promise","resolve","reject","err","apply","base64","string","p","n","charAt","Math","ceil","b64","s64","i","encode","buffer","start","end","t","parts","chunk","j","b","push","String","fromCharCode","slice","join","invalidEncoding","decode","c","charCodeAt","Error","test","codegen","functionParams","functionName","body","Codegen","formatStringOrScope","console","info","JSON","stringify","source","toString","verbose","log","scopeKeys","Object","keys","scopeParams","scopeValues","scopeOffset","Function","formatParams","formatOffset","replace","$0","$1","value","floor","functionNameOverride","EventEmitter","this","_listeners","prototype","on","evt","off","listeners","splice","emit","args","fetch","asPromise","fs","inquire","filename","options","callback","xhr","readFile","contents","XMLHttpRequest","binary","onreadystatechange","readyState","status","response","responseText","Uint8Array","overrideMimeType","responseType","open","send","factory","Float32Array","f32","f8b","le","writeFloat_f32_cpy","val","buf","pos","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloatLE","writeFloatBE","readFloatLE","readFloatBE","writeFloat_ieee754","writeUint","sign","isNaN","round","exponent","LN2","pow","readFloat_ieee754","readUint","uint","mantissa","NaN","Infinity","bind","writeUintLE","writeUintBE","readUintLE","readUintBE","Float64Array","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDoubleLE","writeDoubleBE","readDoubleLE","readDoubleBE","writeDouble_ieee754","off0","off1","readDouble_ieee754","lo","hi","moduleName","mod","eval","e","path","isAbsolute","normalize","split","absolute","prefix","shift","originPath","includePath","alreadyNormalized","alloc","size","SIZE","MAX","slab","call","utf8","len","read","write","c1","c2","converter","Enum","util","genValuePartial_fromObject","field","fieldIndex","prop","$types","$util","mm","resolvedType","values","repeated","typeDefault","TypeError","fullName","fromObject","isUnsigned","type","Long","fromValue","unsigned","parseInt","LongBits","low","high","toNumber","newBuffer","genValuePartial_toObject","o","dd","enums","toObject","json","isFinite","longs","Number","bytes","mtype","arg","types","d","fields","fieldsArray","ctor","m","name","map","ks","_i","isArray","__i","sort","compareFieldsById","repeatedFields","mapFields","normalFields","partOf","defaults","valuesById","long","genDefault","ks2","_fieldsArray","indexOf","hasOwnProperty","oneofs","$Reader","Reader","$fieldCache","requiredFields","idx","f","id","required","r","l","create","k","uint32","group","skip","emptyObject","keyType","basic","longToHash","packed","skipType","rfield","ProtocolError","instance","$Writer","Writer","w","ref","wireType","fork","mapKey","ldelim","genTypePartial","optional","_types","ReflectionObject","constructor","className","Namespace","comment","comments","reserved","fromJSON","enm","toJSON","toJSONOptions","keepComments","add","isString","isInteger","isReservedId","isReservedName","allow_alias","remove","Field","Type","ruleRe","rule","extend","isObject","toLowerCase","message","defaultValue","extensionField","declaringField","_packed","defineProperty","get","getOption","setOption","ifNotSet","resolved","parent","lookupTypeOrEnum","fromNumber","freeze","emptyArray","fieldId","fieldType","fieldRule","decorateType","decorateEnum","fieldName","default","_configure","Type_","build","load","root","Root","loadSync","encoder","decoder","verifier","OneOf","MapField","Service","Method","Message","wrappers","configure","BufferReader","BufferWriter","rpc","roots","resolvedKeyType","fieldKeyType","fieldValueType","properties","$type","writer","encodeDelimited","reader","decodeDelimited","verify","object","requestType","requestStream","responseStream","resolvedRequestType","resolvedResponseType","lookupType","arrayToJSON","array","obj","nested","_nestedArray","clearCache","namespace","addJSON","toArray","nestedArray","nestedJson","names","methods","getEnum","prev","setOptions","onAdd","onRemove","define","ptr","part","resolveAll","lookup","filterTypes","parentAlreadyChecked","found","lookupEnum","lookupService","Service_","Enum_","defineProperties","unshift","_handleAdd","_handleRemove","Root_","fieldNames","oneof","addFieldsToParent","oneofName","oneOfGetter","set","oneOfSetter","indexOutOfRange","writeLength","RangeError","create_array","readLongVarint","bits","readFixed32_end","readFixed64","Buffer","isBuffer","_slice","subarray","int32","sint32","bool","fixed32","sfixed32","float","double","BufferReader_","merge","int64","uint64","sint64","zzDecode","fixed64","sfixed64","utf8Slice","min","parse","common","deferred","files","SYNC","resolvePath","self","sync","finish","cb","getBundledFileName","lastIndexOf","altname","substring","process","parsed","imports","weakImports","queued","weak","setTimeout","readFileSync","isNode","exposeRe","tryHandleExtension","extendedType","sisterField","parse_","common_","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","endedByRPC","_methodsArray","service","inherited","methodsArray","rpcService","lcFirst","q","s","extensions","_fieldsById","_oneofsArray","_ctor","fieldsById","oneofsArray","generateConstructor","ctorProperties","filter","setup","wrapper","originalThis","typeName","target","bake","key","safePropBackslashRe","safePropQuoteRe","isReserved","safeProp","ucFirst","str","toUpperCase","camelCaseRe","camelCase","a","decorateRoot","enumerable","decorateEnumIndex","zero","zzEncode","zeroHash","from","fromString","toLong","fromHash","hash","toHash","mask","part0","part1","part2","dst","src","newError","CustomError","captureStackTrace","stack","pool","global","window","versions","node","isset","isSet","utf8Write","_Buffer_from","_Buffer_allocUnsafe","sizeOrArray","dcodeIO","key2Re","key32Re","key64Re","longFromHash","fromBits","fieldMap","encoding","allocUnsafe","res","seenFirstField","invalid","genVerifyKey","genVerifyValue","oneofProp","expected","type_url","substr","Op","next","noop","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","writeBytes","reset","BufferWriter_","writeBytesBuffer","copy","writeStringBuffer","byteLength","$require","$module","amd","isLong"],"mappings":"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","file":"protobuf.min.js","sourcesContent":["(function prelude(modules, cache, entries) {\n\n    // This is the prelude used to bundle protobuf.js for the browser. Wraps up the CommonJS\n    // sources through a conflict-free require shim and is again wrapped within an iife that\n    // provides a minification-friendly `undefined` var plus a global \"use strict\" directive\n    // so that minification can remove the directives of each module.\n\n    function $require(name) {\n        var $module = cache[name];\n        if (!$module)\n            modules[name][0].call($module = cache[name] = { exports: {} }, $require, $module, $module.exports);\n        return $module.exports;\n    }\n\n    var protobuf = $require(entries[0]);\n\n    // Expose globally\n    protobuf.util.global.protobuf = protobuf;\n\n    // Be nice to AMD\n    if (typeof define === \"function\" && define.amd)\n        define([\"long\"], function(Long) {\n            if (Long && Long.isLong) {\n                protobuf.util.Long = Long;\n                protobuf.configure();\n            }\n            return protobuf;\n        });\n\n    // Be nice to CommonJS\n    if (typeof module === \"object\" && module && module.exports)\n        module.exports = protobuf;\n\n})/* end of prelude */","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = codegen;\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\r\nfunction codegen(functionParams, functionName) {\r\n\r\n    /* istanbul ignore if */\r\n    if (typeof functionParams === \"string\") {\r\n        functionName = functionParams;\r\n        functionParams = undefined;\r\n    }\r\n\r\n    var body = [];\r\n\r\n    /**\r\n     * Appends code to the function's body or finishes generation.\r\n     * @typedef Codegen\r\n     * @type {function}\r\n     * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n     * @param {...*} [formatParams] Format parameters\r\n     * @returns {Codegen|Function} Itself or the generated function if finished\r\n     * @throws {Error} If format parameter counts do not match\r\n     */\r\n\r\n    function Codegen(formatStringOrScope) {\r\n        console.info(\"codegen:\"+JSON.stringify(formatStringOrScope))\r\n        // note that explicit array handling below makes this ~50% faster\r\n\r\n        // finish the function\r\n        if (typeof formatStringOrScope !== \"string\") {\r\n            var source = toString();\r\n            if (codegen.verbose)\r\n                console.log(\"codegen: \" + source); // eslint-disable-line no-console\r\n            source = \"return \" + source;\r\n            if (formatStringOrScope) {\r\n                var scopeKeys   = Object.keys(formatStringOrScope),\r\n                    scopeParams = new Array(scopeKeys.length + 1),\r\n                    scopeValues = new Array(scopeKeys.length),\r\n                    scopeOffset = 0;\r\n                while (scopeOffset < scopeKeys.length) {\r\n                    scopeParams[scopeOffset] = scopeKeys[scopeOffset];\r\n                    scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\r\n                }\r\n                scopeParams[scopeOffset] = source;\r\n                return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\r\n            }\r\n            return Function(source)(); // eslint-disable-line no-new-func\r\n        }\r\n\r\n        // otherwise append to body\r\n        var formatParams = new Array(arguments.length - 1),\r\n            formatOffset = 0;\r\n        while (formatOffset < formatParams.length)\r\n            formatParams[formatOffset] = arguments[++formatOffset];\r\n        formatOffset = 0;\r\n        formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\r\n            var value = formatParams[formatOffset++];\r\n            switch ($1) {\r\n                case \"d\": case \"f\": return String(Number(value));\r\n                case \"i\": return String(Math.floor(value));\r\n                case \"j\": return JSON.stringify(value);\r\n                case \"s\": return String(value);\r\n            }\r\n            return \"%\";\r\n        });\r\n        if (formatOffset !== formatParams.length)\r\n            throw Error(\"parameter count mismatch\");\r\n        body.push(formatStringOrScope);\r\n        return Codegen;\r\n    }\r\n\r\n    function toString(functionNameOverride) {\r\n        return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\r\n    }\r\n\r\n    Codegen.toString = toString;\r\n    return Codegen;\r\n}\r\n\r\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\r\ncodegen.verbose = false;\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = fetch;\r\n\r\nvar asPromise = require(1),\r\n    inquire   = require(7);\r\n\r\nvar fs = inquire(\"fs\");\r\n\r\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\r\nfunction fetch(filename, options, callback) {\r\n    if (typeof options === \"function\") {\r\n        callback = options;\r\n        options = {};\r\n    } else if (!options)\r\n        options = {};\r\n\r\n    if (!callback)\r\n        return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\r\n\r\n    // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\r\n    if (!options.xhr && fs && fs.readFile)\r\n        return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\r\n            return err && typeof XMLHttpRequest !== \"undefined\"\r\n                ? fetch.xhr(filename, options, callback)\r\n                : err\r\n                ? callback(err)\r\n                : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\r\n        });\r\n\r\n    // use the XHR version otherwise.\r\n    return fetch.xhr(filename, options, callback);\r\n}\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\r\n\r\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\r\n\r\n/**/\r\nfetch.xhr = function fetch_xhr(filename, options, callback) {\r\n    var xhr = new XMLHttpRequest();\r\n    xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\r\n\r\n        if (xhr.readyState !== 4)\r\n            return undefined;\r\n\r\n        // local cors security errors return status 0 / empty string, too. afaik this cannot be\r\n        // reliably distinguished from an actually empty file for security reasons. feel free\r\n        // to send a pull request if you are aware of a solution.\r\n        if (xhr.status !== 0 && xhr.status !== 200)\r\n            return callback(Error(\"status \" + xhr.status));\r\n\r\n        // if binary data is expected, make sure that some sort of array is returned, even if\r\n        // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\r\n        if (options.binary) {\r\n            var buffer = xhr.response;\r\n            if (!buffer) {\r\n                buffer = [];\r\n                for (var i = 0; i < xhr.responseText.length; ++i)\r\n                    buffer.push(xhr.responseText.charCodeAt(i) & 255);\r\n            }\r\n            return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\r\n        }\r\n        return callback(null, xhr.responseText);\r\n    };\r\n\r\n    if (options.binary) {\r\n        // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\r\n        if (\"overrideMimeType\" in xhr)\r\n            xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n        xhr.responseType = \"arraybuffer\";\r\n    }\r\n\r\n    xhr.open(\"GET\", filename);\r\n    xhr.send();\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar path = exports;\r\n\r\nvar isAbsolute =\r\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\r\npath.isAbsolute = function isAbsolute(path) {\r\n    return /^(?:\\/|\\w+:)/.test(path);\r\n};\r\n\r\nvar normalize =\r\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\r\npath.normalize = function normalize(path) {\r\n    path = path.replace(/\\\\/g, \"/\")\r\n               .replace(/\\/{2,}/g, \"/\");\r\n    var parts    = path.split(\"/\"),\r\n        absolute = isAbsolute(path),\r\n        prefix   = \"\";\r\n    if (absolute)\r\n        prefix = parts.shift() + \"/\";\r\n    for (var i = 0; i < parts.length;) {\r\n        if (parts[i] === \"..\") {\r\n            if (i > 0 && parts[i - 1] !== \"..\")\r\n                parts.splice(--i, 2);\r\n            else if (absolute)\r\n                parts.splice(i, 1);\r\n            else\r\n                ++i;\r\n        } else if (parts[i] === \".\")\r\n            parts.splice(i, 1);\r\n        else\r\n            ++i;\r\n    }\r\n    return prefix + parts.join(\"/\");\r\n};\r\n\r\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\r\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\r\n    if (!alreadyNormalized)\r\n        includePath = normalize(includePath);\r\n    if (isAbsolute(includePath))\r\n        return includePath;\r\n    if (!alreadyNormalized)\r\n        originPath = normalize(originPath);\r\n    return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */\nvar converter = exports;\n\nvar Enum = require(14),\n    util = require(33);\n\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param prop Property reference\n * @ignore\n */\nfunction genValuePartial_fromObject(field, fieldIndex, prop, $types, $util) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var mm;\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) {\n            for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n                if (field.repeated && values[keys[i]] === field.typeDefault)\n                    continue;\n                if (keys[i] === prop || values[keys[i]] === prop)\n                    mm = values[keys[i]];\n            }\n        } else {\n            if (typeof prop !== \"object\")\n                throw TypeError(field.fullName + \": object expected\");\n            mm = $types[fieldIndex].fromObject(prop);\n        }\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\":\n                mm = Number(prop); // also catches \"NaN\", \"Infinity\"\n                break;\n            case \"uint32\":\n            case \"fixed32\":\n                mm = prop >>> 0;\n                break;\n            case \"int32\":\n            case \"sint32\":\n            case \"sfixed32\":\n                mm = prop | 0;\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n            // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\":\n                if ($util.Long)\n                    (mm = $util.Long.fromValue(prop)).unsigned = isUnsigned;\n                else if (typeof prop === \"string\")\n                    mm = parseInt(prop, 10);\n                else if (typeof prop === \"number\")\n                    mm = prop;\n                else if (typeof prop === \"object\")\n                    mm = new $util.LongBits(prop.low >>> 0, prop.high >>> 0).toNumber(isUnsigned);\n                break;\n            case \"bytes\":\n                if (typeof prop === \"string\")\n                    $util.base64.decode(prop, mm = $util.newBuffer($util.base64.length(prop)), 0);\n                else if (prop.length)\n                    mm = prop;\n                break;\n            case \"string\":\n                mm = String(prop);\n                break;\n            case \"bool\":\n                mm = Boolean(prop);\n                break;\n            /* default: gen\n                (\"m%s=d%s\", prop, prop);\n                break; */\n        }\n    }\n    return mm;\n    // if (field.resolvedType) {\n    //     if (field.resolvedType instanceof Enum) { gen\n    //         (\"switch(d%s){\", prop);\n    //         for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n    //             if (field.repeated && values[keys[i]] === field.typeDefault) gen\n    //             (\"default:\");\n    //             gen\n    //             (\"case%j:\", keys[i])\n    //             (\"case %i:\", values[keys[i]])\n    //                 (\"m%s=%j\", prop, values[keys[i]])\n    //                 (\"break\");\n    //         } gen\n    //         (\"}\");\n    //     } else gen\n    //         (\"if(typeof d%s!==\\\"object\\\")\", prop)\n    //             (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n    //         (\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n    // } else {\n    //     var isUnsigned = false;\n    //     switch (field.type) {\n    //         case \"double\":\n    //         case \"float\": gen\n    //             (\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n    //             break;\n    //         case \"uint32\":\n    //         case \"fixed32\": gen\n    //             (\"m%s=d%s>>>0\", prop, prop);\n    //             break;\n    //         case \"int32\":\n    //         case \"sint32\":\n    //         case \"sfixed32\": gen\n    //             (\"m%s=d%s|0\", prop, prop);\n    //             break;\n    //         case \"uint64\":\n    //             isUnsigned = true;\n    //             // eslint-disable-line no-fallthrough\n    //         case \"int64\":\n    //         case \"sint64\":\n    //         case \"fixed64\":\n    //         case \"sfixed64\": gen\n    //             (\"if(util.Long)\")\n    //                 (\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)\n    //             (\"else if(typeof d%s===\\\"string\\\")\", prop)\n    //                 (\"m%s=parseInt(d%s,10)\", prop, prop)\n    //             (\"else if(typeof d%s===\\\"number\\\")\", prop)\n    //                 (\"m%s=d%s\", prop, prop)\n    //             (\"else if(typeof d%s===\\\"object\\\")\", prop)\n    //                 (\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\n    //             break;\n    //         case \"bytes\": gen\n    //             (\"if(typeof d%s===\\\"string\\\")\", prop)\n    //                 (\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)\n    //             (\"else if(d%s.length)\", prop)\n    //                 (\"m%s=d%s\", prop, prop);\n    //             break;\n    //         case \"string\": gen\n    //             (\"m%s=String(d%s)\", prop, prop);\n    //             break;\n    //         case \"bool\": gen\n    //             (\"m%s=Boolean(d%s)\", prop, prop);\n    //             break;\n    //         /* default: gen\n    //             (\"m%s=d%s\", prop, prop);\n    //             break; */\n    //     }\n    // }\n    // return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.fromObject = function fromObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    return function (arg) {\n        var $types = arg.types, $util = arg.util;\n        var func = function (d) {\n            var fields = mtype.fieldsArray;\n            if (d instanceof this.ctor)\n                return d;\n            if (!fields.length)\n                return new this.ctor;\n            var m = new this.ctor;\n            for (var i = 0; i < fields.length; ++i) {\n                var field = fields[i].resolve(),\n                    prop = field.name;\n\n                // Map fields\n                if (field.map) {\n                    if (d[prop]) {\n                        if (typeof d[prop] !== \"object\")\n                            throw TypeError(field.fullName + \": object expected\");\n                        m[prop] = {};\n                        for (var ks = Object.keys(d[prop]), _i = 0; _i < ks.length; ++_i) {\n                            m[prop][ks[_i]] = genValuePartial_fromObject(field, /* not sorted */ i, d[prop][ks[_i]], $types, $util);\n                        }\n                    }\n                    // Repeated fields\n                } else if (field.repeated) {\n                    if (d[prop]) {\n                        if (!Array.isArray(d[prop]))\n                            throw TypeError(field.fullName + \": array expected\");\n                        m[prop] = [];\n                        for (var __i = 0; __i < d[prop].length; ++__i) {\n                            m[prop][__i] = genValuePartial_fromObject(field, /* not sorted */ i, d[prop][__i], $types, $util);\n                        }\n                    }\n                    // Non-repeated fields\n                } else {\n                    if (field.resolvedType instanceof Enum) {  // no need to test for null/undefined if an enum (uses switch)\n                        m[prop] = genValuePartial_fromObject(field, /* not sorted */ i, d[prop], $types, $util);\n                    } else {\n                        if (d[prop] != null) { // !== undefined && !== null\n                            m[prop] = genValuePartial_fromObject(field, /* not sorted */ i, d[prop], $types, $util);\n                        }\n                    }\n                }\n            }\n            return m;\n        };\n        return func;\n    };\n    // var fields = mtype.fieldsArray;\n    // var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")\n    // (\"if(d instanceof this.ctor)\")\n    //     (\"return d\");\n    // if (!fields.length) return gen\n    // (\"return new this.ctor\");\n    // gen\n    // (\"var m=new this.ctor\");\n    // for (var i = 0; i < fields.length; ++i) {\n    //     var field  = fields[i].resolve(),\n    //         prop   = util.safeProp(field.name);\n    //\n    //     // Map fields\n    //     if (field.map) { gen\n    // (\"if(d%s){\", prop)\n    //     (\"if(typeof d%s!==\\\"object\\\")\", prop)\n    //         (\"throw TypeError(%j)\", field.fullName + \": object expected\")\n    //     (\"m%s={}\", prop)\n    //     (\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n    //         genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[ks[i]]\")\n    //     (\"}\")\n    // (\"}\");\n    //\n    //     // Repeated fields\n    //     } else if (field.repeated) { gen\n    // (\"if(d%s){\", prop)\n    //     (\"if(!Array.isArray(d%s))\", prop)\n    //         (\"throw TypeError(%j)\", field.fullName + \": array expected\")\n    //     (\"m%s=[]\", prop)\n    //     (\"for(var i=0;i<d%s.length;++i){\", prop);\n    //         genValuePartial_fromObject(gen, field, /* not sorted */ i, prop + \"[i]\")\n    //     (\"}\")\n    // (\"}\");\n    //\n    //     // Non-repeated fields\n    //     } else {\n    //         if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n    // (\"if(d%s!=null){\", prop); // !== undefined && !== null\n    //     genValuePartial_fromObject(gen, field, /* not sorted */ i, prop);\n    //         if (!(field.resolvedType instanceof Enum)) gen\n    // (\"}\");\n    //     }\n    // } return gen\n    // (\"return m\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param prop Property reference\n * @ignore\n */\nfunction genValuePartial_toObject(field, fieldIndex, prop, o, $types, $util) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    var dd;\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum)\n            dd = o.enums === String ? $types[fieldIndex].values[prop] : prop;\n        else\n            dd = $types[fieldIndex].toObject(prop, o);\n    } else {\n        var isUnsigned = false;\n        switch (field.type) {\n            case \"double\":\n            case \"float\":\n                dd = o.json && !isFinite(prop) ? String(prop) : prop;\n                break;\n            case \"uint64\":\n                isUnsigned = true;\n            // eslint-disable-line no-fallthrough\n            case \"int64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\":\n                if (typeof prop === \"number\")\n                    dd = o.longs === String ? String(prop) : prop;\n                else // Long-like\n                    dd = o.longs === String ? $util.Long.prototype.toString.call(prop) : o.longs === Number ? new $util.LongBits(prop.low >>> 0, prop.high >>> 0).toNumber(isUnsigned) : prop;\n                break;\n            case \"bytes\":\n                dd = o.bytes === String ? $util.base64.encode(prop, 0, prop.length) : o.bytes === Array ? Array.prototype.slice.call(prop) : prop;\n                break;\n            default:\n                dd = prop;\n                break;\n        }\n    }\n    return dd;\n    // if (field.resolvedType) {\n    //     if (field.resolvedType instanceof Enum) gen\n    //         (\"d%s=o.enums===String?types[%i].values[m%s]:m%s\", prop, fieldIndex, prop, prop);\n    //     else gen\n    //         (\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n    // } else {\n    //     var isUnsigned = false;\n    //     switch (field.type) {\n    //         case \"double\":\n    //         case \"float\": gen\n    //         (\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n    //             break;\n    //         case \"uint64\":\n    //             isUnsigned = true;\n    //             // eslint-disable-line no-fallthrough\n    //         case \"int64\":\n    //         case \"sint64\":\n    //         case \"fixed64\":\n    //         case \"sfixed64\": gen\n    //         (\"if(typeof m%s===\\\"number\\\")\", prop)\n    //             (\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)\n    //         (\"else\") // Long-like\n    //             (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\": \"\", prop);\n    //             break;\n    //         case \"bytes\": gen\n    //         (\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n    //             break;\n    //         default: gen\n    //         (\"d%s=m%s\", prop, prop);\n    //             break;\n    //     }\n    // }\n    // return gen;\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.toObject = function toObject(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    return function (arg) {\n        var $types = arg.types, $util = arg.util;\n        var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n        if (!fields.length)\n            return function () {\n                return {};\n            };\n        var repeatedFields = [],\n            mapFields = [],\n            normalFields = [],\n            i = 0;\n        for (; i < fields.length; ++i)\n            if (!fields[i].partOf)\n                (fields[i].resolve().repeated ? repeatedFields\n                    : fields[i].map ? mapFields\n                        : normalFields).push(fields[i]);\n\n        function genDefault(o) {\n            var d = {};\n            if (repeatedFields.length) {\n                if (o.arrays || o.defaults) {\n                    for (i = 0; i < repeatedFields.length; ++i)\n                        d[repeatedFields[i].name] = [];\n                }\n            }\n\n            if (mapFields.length) {\n                if (o.objects || o.defaults) {\n                    for (i = 0; i < mapFields.length; ++i)\n                        d[mapFields[i].name] = {};\n                }\n            }\n\n            if (normalFields.length) {\n                if (o.defaults) {\n                    for (i = 0; i < normalFields.length; ++i) {\n                        var field = normalFields[i],\n                            prop = field.name;\n                        if (field.resolvedType instanceof Enum)\n                            d[prop] = o.enums === String ? field.resolvedType.valuesById[field.typeDefault] : field.typeDefault;\n                        else if (field.long)\n                            if (util.Long) {\n                                var n = new util.Long(field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned);\n                                d[prop] = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n                            } else\n                                d[prop] = o.longs === String ? field.typeDefault.toString() : field.typeDefault.toNumber();\n                        else if (field.bytes) {\n                            if (o.bytes === String) d[prop] = String.fromCharCode.apply(String, field.typeDefault);\n                            else {\n                                d[prop] = Array.prototype.slice.call(field.typeDefault);\n                                if (o.bytes !== Array) d[prop] = $util.newBuffer(d[prop]);\n                            }\n                        } else\n                            d[prop] = field.typeDefault; // also messages (=null)\n                    }\n                }\n            }\n            return d;\n        }\n\n        var func = function (m, o) {\n            if (!o)\n                o = {};\n            var d = genDefault(o);\n            for (i = 0; i < fields.length; ++i) {\n                var field = fields[i],\n                    index = mtype._fieldsArray.indexOf(field),\n                    prop = field.name;\n                if (field.map) {\n                    var ks2;\n                    if (m[prop] && (ks2 = Object.keys(m[prop])).length) {\n                        d[prop] = {};\n                        for (var _i = 0; _i < ks2.length; ++_i) {\n                            d[prop][ks2[_i]] = genValuePartial_toObject(field, /* sorted */ index, m[prop][ks2[_i]], o, $types, $util);\n                        }\n                    }\n                } else if (field.repeated) {\n                    if (m[prop] && m[prop].length) {\n                        d[prop] = [];\n                        for (var __i = 0; __i < m[prop].length; ++__i) {\n                            d[prop][__i] = genValuePartial_toObject(field, /* sorted */ index, m[prop][__i], o, $types, $util);\n                        }\n                    }\n                } else {\n                    if (m[prop] != null && m.hasOwnProperty(prop)) { // !== undefined && !== null\n                        d[prop] = genValuePartial_toObject(field, /* sorted */ index, m[prop], o, $types, $util);\n                        if (field.partOf)\n                            if (o.oneofs)\n                                d[field.partOf.name] = prop;\n                    }\n                }\n            }\n            return d;\n        };\n        return func;\n    };\n    // var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    // if (!fields.length)\n    //     return util.codegen()(\"return {}\");\n    // var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")\n    // (\"if(!o)\")\n    //     (\"o={}\")\n    // (\"var d={}\");\n    //\n    // var repeatedFields = [],\n    //     mapFields = [],\n    //     normalFields = [],\n    //     i = 0;\n    // for (; i < fields.length; ++i)\n    //     if (!fields[i].partOf)\n    //         ( fields[i].resolve().repeated ? repeatedFields\n    //         : fields[i].map ? mapFields\n    //         : normalFields).push(fields[i]);\n    //\n    // if (repeatedFields.length) { gen\n    // (\"if(o.arrays||o.defaults){\");\n    //     for (i = 0; i < repeatedFields.length; ++i) gen\n    //     (\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n    //     gen\n    // (\"}\");\n    // }\n    //\n    // if (mapFields.length) { gen\n    // (\"if(o.objects||o.defaults){\");\n    //     for (i = 0; i < mapFields.length; ++i) gen\n    //     (\"d%s={}\", util.safeProp(mapFields[i].name));\n    //     gen\n    // (\"}\");\n    // }\n    //\n    // if (normalFields.length) { gen\n    // (\"if(o.defaults){\");\n    //     for (i = 0; i < normalFields.length; ++i) {\n    //         var field = normalFields[i],\n    //             prop  = util.safeProp(field.name);\n    //         if (field.resolvedType instanceof Enum) gen\n    //     (\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);\n    //         else if (field.long) gen\n    //     (\"if(util.Long){\")\n    //         (\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)\n    //         (\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)\n    //     (\"}else\")\n    //         (\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());\n    //         else if (field.bytes) {\n    //             var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n    //             gen\n    //     (\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))\n    //     (\"else{\")\n    //         (\"d%s=%s\", prop, arrayDefault)\n    //         (\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)\n    //     (\"}\");\n    //         } else gen\n    //     (\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n    //     } gen\n    // (\"}\");\n    // }\n    // var hasKs2 = false;\n    // for (i = 0; i < fields.length; ++i) {\n    //     var field = fields[i],\n    //         index = mtype._fieldsArray.indexOf(field),\n    //         prop  = util.safeProp(field.name);\n    //     if (field.map) {\n    //         if (!hasKs2) { hasKs2 = true; gen\n    // (\"var ks2\");\n    //         } gen\n    // (\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)\n    //     (\"d%s={}\", prop)\n    //     (\"for(var j=0;j<ks2.length;++j){\");\n    //         genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[ks2[j]]\")\n    //     (\"}\");\n    //     } else if (field.repeated) { gen\n    // (\"if(m%s&&m%s.length){\", prop, prop)\n    //     (\"d%s=[]\", prop)\n    //     (\"for(var j=0;j<m%s.length;++j){\", prop);\n    //         genValuePartial_toObject(gen, field, /* sorted */ index, prop + \"[j]\")\n    //     (\"}\");\n    //     } else { gen\n    // (\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n    //     genValuePartial_toObject(gen, field, /* sorted */ index, prop);\n    //     if (field.partOf) gen\n    //     (\"if(o.oneofs)\")\n    //         (\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n    //     }\n    //     gen\n    // (\"}\");\n    // }\n    // return gen\n    // (\"return d\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n","\"use strict\";\nmodule.exports = decoder;\n\nvar Enum = require(14),\n    types = require(32),\n    util = require(33);\n\nfunction missing(field) {\n    return \"missing required '\" + field.name + \"'\";\n}\n\n/**\n * Generates a decoder specific to the specified message type.\n * @param {Type} mtype Message type\n */\nfunction decoder(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    return function (arg) {\n        var $Reader = arg.Reader, $types = arg.types, $util = arg.util;\n        var $fieldCache = {}, fieldsArray = mtype.fieldsArray, requiredFields = [];\n        for (var idx = 0, len = fieldsArray.length; idx < len; ++idx) {\n            var f = mtype._fieldsArray[idx].resolve();\n            $fieldCache[f.id] = {field: f, index: idx};\n            if (f.required) {\n                requiredFields.push(f);\n            }\n        }\n        var func = function (r, l) {\n            if (!(r instanceof $Reader))\n                r = $Reader.create(r);\n            var c = l === undefined ? r.len : r.pos + l, m = new this.ctor, k;\n            while (r.pos < c) {\n                var t = r.uint32();\n                if (mtype.group) {\n                    if ((t & 7) === 4)\n                        break;\n                }\n                var cache = $fieldCache[t >>> 3];\n                if (cache) {\n                    var i = cache.index,\n                        field = cache.field,\n                        name = field.name,\n                        type = field.resolvedType instanceof Enum ? \"int32\" : field.type;\n                    //ref   = m[field.name];\n                    if (field.map) {\n                        r.skip().pos++;\n                        if (m[name] === $util.emptyObject)\n                            m[name] = {};\n                        k = r[field.keyType]();\n                        r.pos++;\n                        if (types.long[field.keyType] !== undefined) {\n                            if (types.basic[type] === undefined) {\n                                m[name][typeof k === \"object\" ? $util.longToHash(k) : k] = $types[i].decode(r, r.uint32());\n                            } else {\n                                m[name][typeof k === \"object\" ? $util.longToHash(k) : k] = r[type]();\n                            }\n                        } else {\n                            if (types.basic[type] === undefined) {\n                                m[name] = $types[i].decode(r, r.uint32());\n                            } else {\n                                m[name] = r[type]();\n                            }\n                        }\n                    } else if (field.repeated) {\n                        if (!(m[name] && m[name].length))\n                            m[name] = [];\n                        if (types.packed[type] !== undefined) {\n                            if ((t & 7) === 2) {\n                                var c2 = r.uint32() + r.pos;\n                                while (r.pos < c2)\n                                    m[name].push(r[type]());\n                            } else {\n                                m[name].push(r[type]());\n                            }\n                        } else if (types.basic[type] === undefined) {\n                            if (field.resolvedType.group) {\n                                m[name].push($types[i].decode(r));\n                            } else {\n                                var len = r.uint32();\n                                if (!len) {\n                                    continue;\n                                }\n                                m[name].push($types[i].decode(r, len));\n                            }\n                        } else {\n                            m[name].push(r[type]());\n                        }\n                    } else if (types.basic[type] === undefined) {\n                        if (field.resolvedType.group)\n                            m[name] = $types[i].decode(r);\n                        else\n                            m[name] = $types[i].decode(r, r.uint32());\n                    } else {\n                        m[name] = r[type]();\n                    }\n                } else {\n                    r.skipType(t & 7);\n                }\n            }\n            for (var j = 0; j < requiredFields.length; ++j) {\n                var rfield = requiredFields[j];\n                if (!m.hasOwnProperty(rfield.name)) {\n                    throw $util.ProtocolError(missing(rfield), {instance: m});\n                }\n            }\n            return m;\n        };\n        return func;\n    };\n    // var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")\n    // (\"if(!(r instanceof Reader))\")\n    //     (\"r=Reader.create(r)\")\n    // (\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function(field) { return field.map; }).length ? \",k\" : \"\"))\n    // (\"while(r.pos<c){\")\n    //     (\"var t=r.uint32()\");\n    // if (mtype.group) gen\n    //     (\"if((t&7)===4)\")\n    //         (\"break\");\n    // gen\n    //     (\"switch(t>>>3){\");\n    //\n    // var i = 0;\n    // for (; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n    //     var field = mtype._fieldsArray[i].resolve(),\n    //         type  = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n    //         ref   = \"m\" + util.safeProp(field.name); gen\n    //         (\"case %i:\", field.id);\n    //\n    //     // Map fields\n    //     if (field.map) { gen\n    //             (\"r.skip().pos++\") // assumes id 1 + key wireType\n    //             (\"if(%s===util.emptyObject)\", ref)\n    //                 (\"%s={}\", ref)\n    //             (\"k=r.%s()\", field.keyType)\n    //             (\"r.pos++\"); // assumes id 2 + value wireType\n    //         if (types.long[field.keyType] !== undefined) {\n    //             if (types.basic[type] === undefined) gen\n    //             (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\n    //             else gen\n    //             (\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=r.%s()\", ref, type);\n    //         } else {\n    //             if (types.basic[type] === undefined) gen\n    //             (\"%s[k]=types[%i].decode(r,r.uint32())\", ref, i); // can't be groups\n    //             else gen\n    //             (\"%s[k]=r.%s()\", ref, type);\n    //         }\n    //\n    //     // Repeated fields\n    //     } else if (field.repeated) { gen\n    //\n    //             (\"if(!(%s&&%s.length))\", ref, ref)\n    //                 (\"%s=[]\", ref);\n    //\n    //         // Packable (always check for forward and backward compatiblity)\n    //         if (types.packed[type] !== undefined) gen\n    //             (\"if((t&7)===2){\")\n    //                 (\"var c2=r.uint32()+r.pos\")\n    //                 (\"while(r.pos<c2)\")\n    //                     (\"%s.push(r.%s())\", ref, type)\n    //             (\"}else\");\n    //\n    //         // Non-packed\n    //         if (types.basic[type] === undefined) gen(field.resolvedType.group\n    //                 ? \"%s.push(types[%i].decode(r))\"\n    //                 : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);\n    //         else gen\n    //                 (\"%s.push(r.%s())\", ref, type);\n    //\n    //     // Non-repeated\n    //     } else if (types.basic[type] === undefined) gen(field.resolvedType.group\n    //             ? \"%s=types[%i].decode(r)\"\n    //             : \"%s=types[%i].decode(r,r.uint32())\", ref, i);\n    //     else gen\n    //             (\"%s=r.%s()\", ref, type);\n    //     gen\n    //             (\"break\");\n    // // Unknown fields\n    // } gen\n    //         (\"default:\")\n    //             (\"r.skipType(t&7)\")\n    //             (\"break\")\n    //\n    //     (\"}\")\n    // (\"}\");\n    //\n    // // Field presence\n    // for (i = 0; i < mtype._fieldsArray.length; ++i) {\n    //     var rfield = mtype._fieldsArray[i];\n    //     if (rfield.required) gen\n    // (\"if(!m.hasOwnProperty(%j))\", rfield.name)\n    //     (\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\n    // }\n    //\n    // return gen\n    // (\"return m\");\n    /* eslint-enable no-unexpected-multiline */\n}\n","\"use strict\";\nmodule.exports = encoder;\n\nvar Enum = require(14),\n    types = require(32),\n    util = require(33);\n\n/**\n * Generates a partial message type encoder.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @ignore\n */\nfunction genTypePartial(field, fieldIndex, ref, _types, w) {\n    return field.resolvedType.group\n        ? _types[fieldIndex].encode(ref, w.uint32((field.id << 3 | 3) >>> 0)).uint32((field.id << 3 | 4) >>> 0)\n        : _types[fieldIndex].encode(ref, w.uint32((field.id << 3 | 2) >>> 0).fork()).ldelim();\n}\n\n/**\n * Generates an encoder specific to the specified message type.\n * @param {Type} mtype Message type\n */\nfunction encoder(mtype) {\n    /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n    return function (arg) {\n        var $Writer = arg.Writer, $types = arg.types, $util = arg.util;\n        var func = function (m, w) {\n            if (!w)\n                w = $Writer.create();\n\n            var i, ref;\n\n            // \"when a message is serialized its known fields should be written sequentially by field number\"\n            var fields = /* initializes */ mtype.fieldsArray.slice().sort($util.compareFieldsById);\n\n            for (i = 0; i < fields.length; ++i) {\n                var field = fields[i].resolve(),\n                    index = mtype._fieldsArray.indexOf(field),\n                    type = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n                    wireType = types.basic[type];\n                ref = m[field.name];\n                if (field.resolvedType instanceof Enum && typeof ref === \"string\") {\n                    ref = $types[index].values[ref];\n                }\n                // Map fields\n                if (field.map) {\n                    if (ref != null && Object.hasOwnProperty.call(m, field.name)) { // !== undefined && !== null\n                        for (var ks = Object.keys(ref), j = 0; j < ks.length; ++j) {\n                            w.uint32((field.id << 3 | 2) >>> 0).fork().uint32(8 | types.mapKey[field.keyType])[field.keyType](ks[j]);\n                            if (wireType === undefined)\n                                $types[index].encode(ref[ks[j]], w.uint32(18).fork()).ldelim().ldelim(); // can't be groups\n                            else\n                                w.uint32(16 | wireType)[type](ref[ks[j]]).ldelim();\n                        }\n                    }\n\n                    // Repeated fields\n                } else if (field.repeated) {\n                    if (ref != null && ref.length) { // !== undefined && !== null\n                        // Packed repeated\n                        if (field.packed && types.packed[type] !== undefined) {\n                            w.uint32((field.id << 3 | 2) >>> 0).fork();\n                            for (var k = 0; k < ref.length; ++k)\n                                w[type](ref[k]);\n                            w.ldelim();\n                            // Non-packed\n                        } else {\n                            for (var l = 0; l < ref.length; ++l)\n                                if (wireType === undefined)\n                                    genTypePartial(field, index, ref[l], $types, w);\n                                else\n                                    w.uint32((field.id << 3 | wireType) >>> 0)[type](ref[l]);\n                        }\n                    }\n\n                    // Non-repeated\n                } else {\n                    if (field.optional)\n                        if (ref != null && Object.hasOwnProperty.call(m, field.name)) // !== undefined && !== null\n                            if (wireType === undefined)\n                                genTypePartial(field, index, ref, $types, w);\n                            else\n                                w.uint32((field.id << 3 | wireType) >>> 0)[type](ref);\n\n                }\n            }\n            return w;\n        };\n        return func;\n    };\n    // var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")\n    // (\"if(!w)\")\n    //     (\"w=Writer.create()\");\n    //\n    // var i, ref;\n    //\n    // // \"when a message is serialized its known fields should be written sequentially by field number\"\n    // var fields = /* initializes */ mtype.fieldsArray.slice().sort(util.compareFieldsById);\n    //\n    // for (var i = 0; i < fields.length; ++i) {\n    //     var field    = fields[i].resolve(),\n    //         index    = mtype._fieldsArray.indexOf(field),\n    //         type     = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n    //         wireType = types.basic[type];\n    //         ref      = \"m\" + util.safeProp(field.name);\n    //\n    //     // Map fields\n    //     if (field.map) {\n    //         gen\n    // (\"if(%s!=null&&Object.hasOwnProperty.call(m,%j)){\", ref, field.name) // !== undefined && !== null\n    //     (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)\n    //         (\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\n    //         if (wireType === undefined) gen\n    //         (\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\n    //         else gen\n    //         (\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\n    //         gen\n    //     (\"}\")\n    // (\"}\");\n    //\n    //         // Repeated fields\n    //     } else if (field.repeated) { gen\n    // (\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\n    //\n    //         // Packed repeated\n    //         if (field.packed && types.packed[type] !== undefined) { gen\n    //\n    //     (\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)\n    //     (\"for(var i=0;i<%s.length;++i)\", ref)\n    //         (\"w.%s(%s[i])\", type, ref)\n    //     (\"w.ldelim()\");\n    //\n    //         // Non-packed\n    //         } else { gen\n    //\n    //     (\"for(var i=0;i<%s.length;++i)\", ref);\n    //             if (wireType === undefined)\n    //         genTypePartial(gen, field, index, ref + \"[i]\");\n    //             else gen\n    //         (\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\n    //\n    //         } gen\n    // (\"}\");\n    //\n    //     // Non-repeated\n    //     } else {\n    //         if (field.optional) gen\n    // (\"if(%s!=null&&Object.hasOwnProperty.call(m,%j))\", ref, field.name); // !== undefined && !== null\n    //\n    //         if (wireType === undefined)\n    //     genTypePartial(gen, field, index, ref);\n    //         else gen\n    //     (\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\n    //\n    //     }\n    // }\n    //\n    // return gen\n    // (\"return w\");\n    /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n","\"use strict\";\nmodule.exports = Enum;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\n\nvar Namespace = require(21),\n    util = require(33);\n\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n */\nfunction Enum(name, values, options, comment, comments) {\n    ReflectionObject.call(this, name, options);\n\n    if (values && typeof values !== \"object\")\n        throw TypeError(\"values must be an object\");\n\n    /**\n     * Enum values by id.\n     * @type {Object.<number,string>}\n     */\n    this.valuesById = {};\n\n    /**\n     * Enum values by name.\n     * @type {Object.<string,number>}\n     */\n    this.values = Object.create(this.valuesById); // toJSON, marker\n\n    /**\n     * Enum comment text.\n     * @type {string|null}\n     */\n    this.comment = comment;\n\n    /**\n     * Value comment texts, if any.\n     * @type {Object.<string,string>}\n     */\n    this.comments = comments || {};\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n    // compatible enum. This is used by pbts to write actual enum definitions that work for\n    // static and reflection code alike instead of emitting generic object definitions.\n\n    if (values)\n        for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)\n            if (typeof values[keys[i]] === \"number\") // use forward entries only\n                this.valuesById[ this.values[keys[i]] = values[keys[i]] ] = keys[i];\n}\n\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */\n\n/**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */\nEnum.fromJSON = function fromJSON(name, json) {\n    var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n    enm.reserved = json.reserved;\n    return enm;\n};\n\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"  , this.options,\n        \"values\"   , this.values,\n        \"reserved\" , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"comment\"  , keepComments ? this.comment : undefined,\n        \"comments\" , keepComments ? this.comments : undefined\n    ]);\n};\n\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */\nEnum.prototype.add = function add(name, id, comment) {\n    // utilized by the parser but not by .fromJSON\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (!util.isInteger(id))\n        throw TypeError(\"id must be an integer\");\n\n    if (this.values[name] !== undefined)\n        throw Error(\"duplicate name '\" + name + \"' in \" + this);\n\n    if (this.isReservedId(id))\n        throw Error(\"id \" + id + \" is reserved in \" + this);\n\n    if (this.isReservedName(name))\n        throw Error(\"name '\" + name + \"' is reserved in \" + this);\n\n    if (this.valuesById[id] !== undefined) {\n        if (!(this.options && this.options.allow_alias))\n            throw Error(\"duplicate id \" + id + \" in \" + this);\n        this.values[name] = id;\n    } else\n        this.valuesById[this.values[name] = id] = name;\n\n    this.comments[name] = comment || null;\n    return this;\n};\n\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */\nEnum.prototype.remove = function remove(name) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    var val = this.values[name];\n    if (val == null)\n        throw Error(\"name '\" + name + \"' does not exist in \" + this);\n\n    delete this.valuesById[val];\n    delete this.values[name];\n    delete this.comments[name];\n\n    return this;\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n","\"use strict\";\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\n\nvar Enum  = require(14),\n    types = require(32),\n    util  = require(33);\n\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n    return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n\n    if (util.isObject(rule)) {\n        comment = extend;\n        options = rule;\n        rule = extend = undefined;\n    } else if (util.isObject(extend)) {\n        comment = options;\n        options = extend;\n        extend = undefined;\n    }\n\n    ReflectionObject.call(this, name, options);\n\n    if (!util.isInteger(id) || id < 0)\n        throw TypeError(\"id must be a non-negative integer\");\n\n    if (!util.isString(type))\n        throw TypeError(\"type must be a string\");\n\n    if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase()))\n        throw TypeError(\"rule must be a string rule\");\n\n    if (extend !== undefined && !util.isString(extend))\n        throw TypeError(\"extend must be a string\");\n\n    /**\n     * Field rule, if any.\n     * @type {string|undefined}\n     */\n    this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n    /**\n     * Field type.\n     * @type {string}\n     */\n    this.type = type; // toJSON\n\n    /**\n     * Unique field id.\n     * @type {number}\n     */\n    this.id = id; // toJSON, marker\n\n    /**\n     * Extended type if different from parent.\n     * @type {string|undefined}\n     */\n    this.extend = extend || undefined; // toJSON\n\n    /**\n     * Whether this field is required.\n     * @type {boolean}\n     */\n    this.required = rule === \"required\";\n\n    /**\n     * Whether this field is optional.\n     * @type {boolean}\n     */\n    this.optional = !this.required;\n\n    /**\n     * Whether this field is repeated.\n     * @type {boolean}\n     */\n    this.repeated = rule === \"repeated\";\n\n    /**\n     * Whether this field is a map or not.\n     * @type {boolean}\n     */\n    this.map = false;\n\n    /**\n     * Message this field belongs to.\n     * @type {Type|null}\n     */\n    this.message = null;\n\n    /**\n     * OneOf this field belongs to, if any,\n     * @type {OneOf|null}\n     */\n    this.partOf = null;\n\n    /**\n     * The field type's default value.\n     * @type {*}\n     */\n    this.typeDefault = null;\n\n    /**\n     * The field's default value on prototypes.\n     * @type {*}\n     */\n    this.defaultValue = null;\n\n    /**\n     * Whether this field's value should be treated as a long.\n     * @type {boolean}\n     */\n    this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */ false;\n\n    /**\n     * Whether this field's value is a buffer.\n     * @type {boolean}\n     */\n    this.bytes = type === \"bytes\";\n\n    /**\n     * Resolved type if not a basic type.\n     * @type {Type|Enum|null}\n     */\n    this.resolvedType = null;\n\n    /**\n     * Sister-field within the extended type if a declaring extension field.\n     * @type {Field|null}\n     */\n    this.extensionField = null;\n\n    /**\n     * Sister-field within the declaring namespace if an extended field.\n     * @type {Field|null}\n     */\n    this.declaringField = null;\n\n    /**\n     * Internally remembers whether this field is packed.\n     * @type {boolean|null}\n     * @private\n     */\n    this._packed = null;\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n    get: function() {\n        // defaults to packed=true if not explicity set to false\n        if (this._packed === null)\n            this._packed = this.getOption(\"packed\") !== false;\n        return this._packed;\n    }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (name === \"packed\") // clear cached before setting\n        this._packed = null;\n    return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"rule\"    , this.rule !== \"optional\" && this.rule || undefined,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n\n    if (this.resolved)\n        return this;\n\n    if ((this.typeDefault = types.defaults[this.type]) === undefined) { // if not a basic type, resolve it\n        this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n        if (this.resolvedType instanceof Type)\n            this.typeDefault = null;\n        else // instanceof Enum\n            this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n    }\n\n    // use explicitly set default value if present\n    if (this.options && this.options[\"default\"] != null) {\n        this.typeDefault = this.options[\"default\"];\n        if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\")\n            this.typeDefault = this.resolvedType.values[this.typeDefault];\n    }\n\n    // remove unnecessary options\n    if (this.options) {\n        if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum))\n            delete this.options.packed;\n        if (!Object.keys(this.options).length)\n            this.options = undefined;\n    }\n\n    // convert to internal data type if necesssary\n    if (this.long) {\n        this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n        /* istanbul ignore else */\n        if (Object.freeze)\n            Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n\n    } else if (this.bytes && typeof this.typeDefault === \"string\") {\n        var buf;\n        if (util.base64.test(this.typeDefault))\n            util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);\n        else\n            util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n        this.typeDefault = buf;\n    }\n\n    // take special care of maps and repeated fields\n    if (this.map)\n        this.defaultValue = util.emptyObject;\n    else if (this.repeated)\n        this.defaultValue = util.emptyArray;\n    else\n        this.defaultValue = this.typeDefault;\n\n    // ensure proper value on prototype\n    if (this.parent instanceof Type)\n        this.parent.ctor.prototype[this.name] = this.defaultValue;\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n\n    // submessage: decorate the submessage and use its name as the type\n    if (typeof fieldType === \"function\")\n        fieldType = util.decorateType(fieldType).name;\n\n    // enum reference: create a reflected copy of the enum and keep reuseing it\n    else if (fieldType && typeof fieldType === \"object\")\n        fieldType = util.decorateEnum(fieldType).name;\n\n    return function fieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new Field(fieldName, fieldId, fieldType, fieldRule, { \"default\": defaultValue }));\n    };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n    Type = Type_;\n};\n","\"use strict\";\nvar protobuf = module.exports = require(17);\n\nprotobuf.build = \"light\";\n\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\nfunction load(filename, root, callback) {\n    if (typeof root === \"function\") {\n        callback = root;\n        root = new protobuf.Root();\n    } else if (!root)\n        root = new protobuf.Root();\n    return root.load(filename, callback);\n}\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */\nfunction loadSync(filename, root) {\n    if (!root)\n        root = new protobuf.Root();\n    return root.loadSync(filename);\n}\n\nprotobuf.loadSync = loadSync;\n\n// Serialization\nprotobuf.encoder          = require(13);\nprotobuf.decoder          = require(12);\nprotobuf.verifier         = require(36);\nprotobuf.converter        = require(11);\n\n// Reflection\nprotobuf.ReflectionObject = require(22);\nprotobuf.Namespace        = require(21);\nprotobuf.Root             = require(26);\nprotobuf.Enum             = require(14);\nprotobuf.Type             = require(31);\nprotobuf.Field            = require(15);\nprotobuf.OneOf            = require(23);\nprotobuf.MapField         = require(18);\nprotobuf.Service          = require(30);\nprotobuf.Method           = require(20);\n\n// Runtime\nprotobuf.Message          = require(19);\nprotobuf.wrappers         = require(37);\n\n// Utility\nprotobuf.types            = require(32);\nprotobuf.util             = require(33);\n\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);\n","\"use strict\";\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = require(38);\nprotobuf.BufferWriter = require(39);\nprotobuf.Reader       = require(24);\nprotobuf.BufferReader = require(25);\n\n// Utility\nprotobuf.util         = require(35);\nprotobuf.rpc          = require(28);\nprotobuf.roots        = require(27);\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.Reader._configure(protobuf.BufferReader);\n    protobuf.util._configure();\n}\n\n// Set up buffer utility according to the environment\nprotobuf.Writer._configure(protobuf.BufferWriter);\nconfigure();\n","\"use strict\";\nmodule.exports = MapField;\n\n// extends Field\nvar Field = require(15);\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\n\nvar types   = require(32),\n    util    = require(33);\n\n/**\n * Constructs a new map field instance.\n * @classdesc Reflected map field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} keyType Key type\n * @param {string} type Value type\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction MapField(name, id, keyType, type, options, comment) {\n    Field.call(this, name, id, type, undefined, undefined, options, comment);\n\n    /* istanbul ignore if */\n    if (!util.isString(keyType))\n        throw TypeError(\"keyType must be a string\");\n\n    /**\n     * Key type.\n     * @type {string}\n     */\n    this.keyType = keyType; // toJSON, marker\n\n    /**\n     * Resolved key type if not a basic type.\n     * @type {ReflectionObject|null}\n     */\n    this.resolvedKeyType = null;\n\n    // Overrides Field#map\n    this.map = true;\n}\n\n/**\n * Map field descriptor.\n * @interface IMapField\n * @extends {IField}\n * @property {string} keyType Key type\n */\n\n/**\n * Extension map field descriptor.\n * @interface IExtensionMapField\n * @extends IMapField\n * @property {string} extend Extended type\n */\n\n/**\n * Constructs a map field from a map field descriptor.\n * @param {string} name Field name\n * @param {IMapField} json Map field descriptor\n * @returns {MapField} Created map field\n * @throws {TypeError} If arguments are invalid\n */\nMapField.fromJSON = function fromJSON(name, json) {\n    return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n};\n\n/**\n * Converts this map field to a map field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMapField} Map field descriptor\n */\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"keyType\" , this.keyType,\n        \"type\"    , this.type,\n        \"id\"      , this.id,\n        \"extend\"  , this.extend,\n        \"options\" , this.options,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nMapField.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n\n    // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n    if (types.mapKey[this.keyType] === undefined)\n        throw Error(\"invalid key type: \" + this.keyType);\n\n    return Field.prototype.resolve.call(this);\n};\n\n/**\n * Map field decorator (TypeScript).\n * @name MapField.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n * @returns {FieldDecorator} Decorator function\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n */\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n\n    // submessage value: decorate the submessage and use its name as the type\n    if (typeof fieldValueType === \"function\")\n        fieldValueType = util.decorateType(fieldValueType).name;\n\n    // enum reference value: create a reflected copy of the enum and keep reuseing it\n    else if (fieldValueType && typeof fieldValueType === \"object\")\n        fieldValueType = util.decorateEnum(fieldValueType).name;\n\n    return function mapFieldDecorator(prototype, fieldName) {\n        util.decorateType(prototype.constructor)\n            .add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n    };\n};\n","\"use strict\";\nmodule.exports = Message;\n\nvar util = require(35);\n\n/**\n * Constructs a new message instance.\n * @classdesc Abstract runtime message.\n * @constructor\n * @param {Properties<T>} [properties] Properties to set\n * @template T extends object = object\n */\nfunction Message(properties) {\n    // not used internally\n    if (properties)\n        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n            this[keys[i]] = properties[keys[i]];\n}\n\n/**\n * Reference to the reflected type.\n * @name Message.$type\n * @type {Type}\n * @readonly\n */\n\n/**\n * Reference to the reflected type.\n * @name Message#$type\n * @type {Type}\n * @readonly\n */\n\n/*eslint-disable valid-jsdoc*/\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<T>} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.create = function create(properties) {\n    return this.$type.create(properties);\n};\n\n/**\n * Encodes a message of this type.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encode = function encode(message, writer) {\n    return this.$type.encode(message, writer);\n};\n\n/**\n * Encodes a message of this type preceeded by its length as a varint.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.$type.encodeDelimited(message, writer);\n};\n\n/**\n * Decodes a message of this type.\n * @name Message.decode\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decode = function decode(reader) {\n    return this.$type.decode(reader);\n};\n\n/**\n * Decodes a message of this type preceeded by its length as a varint.\n * @name Message.decodeDelimited\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decodeDelimited = function decodeDelimited(reader) {\n    return this.$type.decodeDelimited(reader);\n};\n\n/**\n * Verifies a message of this type.\n * @name Message.verify\n * @function\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\n */\nMessage.verify = function verify(message) {\n    return this.$type.verify(message);\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object\n * @returns {T} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.fromObject = function fromObject(object) {\n    return this.$type.fromObject(object);\n};\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {T} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.toObject = function toObject(message, options) {\n    return this.$type.toObject(message, options);\n};\n\n/**\n * Converts this message to JSON.\n * @returns {Object.<string,*>} JSON object\n */\nMessage.prototype.toJSON = function toJSON() {\n    return this.$type.toObject(this, util.toJSONOptions);\n};\n\n/*eslint-enable valid-jsdoc*/","\"use strict\";\nmodule.exports = Method;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\n\nvar util = require(33);\n\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this method\n */\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment) {\n\n    /* istanbul ignore next */\n    if (util.isObject(requestStream)) {\n        options = requestStream;\n        requestStream = responseStream = undefined;\n    } else if (util.isObject(responseStream)) {\n        options = responseStream;\n        responseStream = undefined;\n    }\n\n    /* istanbul ignore if */\n    if (!(type === undefined || util.isString(type)))\n        throw TypeError(\"type must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(requestType))\n        throw TypeError(\"requestType must be a string\");\n\n    /* istanbul ignore if */\n    if (!util.isString(responseType))\n        throw TypeError(\"responseType must be a string\");\n\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Method type.\n     * @type {string}\n     */\n    this.type = type || \"rpc\"; // toJSON\n\n    /**\n     * Request type.\n     * @type {string}\n     */\n    this.requestType = requestType; // toJSON, marker\n\n    /**\n     * Whether requests are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.requestStream = requestStream ? true : undefined; // toJSON\n\n    /**\n     * Response type.\n     * @type {string}\n     */\n    this.responseType = responseType; // toJSON\n\n    /**\n     * Whether responses are streamed or not.\n     * @type {boolean|undefined}\n     */\n    this.responseStream = responseStream ? true : undefined; // toJSON\n\n    /**\n     * Resolved request type.\n     * @type {Type|null}\n     */\n    this.resolvedRequestType = null;\n\n    /**\n     * Resolved response type.\n     * @type {Type|null}\n     */\n    this.resolvedResponseType = null;\n\n    /**\n     * Comment for this method\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n */\n\n/**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */\nMethod.fromJSON = function fromJSON(name, json) {\n    return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment);\n};\n\n/**\n * Converts this method to a method descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMethod} Method descriptor\n */\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"type\"           , this.type !== \"rpc\" && /* istanbul ignore next */ this.type || undefined,\n        \"requestType\"    , this.requestType,\n        \"requestStream\"  , this.requestStream,\n        \"responseType\"   , this.responseType,\n        \"responseStream\" , this.responseStream,\n        \"options\"        , this.options,\n        \"comment\"        , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nMethod.prototype.resolve = function resolve() {\n\n    /* istanbul ignore if */\n    if (this.resolved)\n        return this;\n\n    this.resolvedRequestType = this.parent.lookupType(this.requestType);\n    this.resolvedResponseType = this.parent.lookupType(this.responseType);\n\n    return ReflectionObject.prototype.resolve.call(this);\n};\n","\"use strict\";\nmodule.exports = Namespace;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\n\nvar Field    = require(15),\n    util     = require(33);\n\nvar Type,    // cyclic\n    Service,\n    Enum;\n\n/**\n * Constructs a new namespace instance.\n * @name Namespace\n * @classdesc Reflected namespace.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a namespace from JSON.\n * @memberof Namespace\n * @function\n * @param {string} name Namespace name\n * @param {Object.<string,*>} json JSON object\n * @returns {Namespace} Created namespace\n * @throws {TypeError} If arguments are invalid\n */\nNamespace.fromJSON = function fromJSON(name, json) {\n    return new Namespace(name, json.options).addJSON(json.nested);\n};\n\n/**\n * Converts an array of reflection objects to JSON.\n * @memberof Namespace\n * @param {ReflectionObject[]} array Object array\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\n */\nfunction arrayToJSON(array, toJSONOptions) {\n    if (!(array && array.length))\n        return undefined;\n    var obj = {};\n    for (var i = 0; i < array.length; ++i)\n        obj[array[i].name] = array[i].toJSON(toJSONOptions);\n    return obj;\n}\n\nNamespace.arrayToJSON = arrayToJSON;\n\n/**\n * Tests if the specified id is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedId = function isReservedId(reserved, id) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] > id)\n                return true;\n    return false;\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedName = function isReservedName(reserved, name) {\n    if (reserved)\n        for (var i = 0; i < reserved.length; ++i)\n            if (reserved[i] === name)\n                return true;\n    return false;\n};\n\n/**\n * Not an actual constructor. Use {@link Namespace} instead.\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports NamespaceBase\n * @extends ReflectionObject\n * @abstract\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n * @see {@link Namespace}\n */\nfunction Namespace(name, options) {\n    ReflectionObject.call(this, name, options);\n\n    /**\n     * Nested objects by name.\n     * @type {Object.<string,ReflectionObject>|undefined}\n     */\n    this.nested = undefined; // toJSON\n\n    /**\n     * Cached nested objects as an array.\n     * @type {ReflectionObject[]|null}\n     * @private\n     */\n    this._nestedArray = null;\n}\n\nfunction clearCache(namespace) {\n    namespace._nestedArray = null;\n    return namespace;\n}\n\n/**\n * Nested objects of this namespace as an array for iteration.\n * @name NamespaceBase#nestedArray\n * @type {ReflectionObject[]}\n * @readonly\n */\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\n    get: function() {\n        return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\n    }\n});\n\n/**\n * Namespace descriptor.\n * @interface INamespace\n * @property {Object.<string,*>} [options] Namespace options\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\n */\n\n/**\n * Any extension field descriptor.\n * @typedef AnyExtensionField\n * @type {IExtensionField|IExtensionMapField}\n */\n\n/**\n * Any nested object descriptor.\n * @typedef AnyNestedObject\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace}\n */\n// ^ BEWARE: VSCode hangs forever when using more than 5 types (that's why AnyExtensionField exists in the first place)\n\n/**\n * Converts this namespace to a namespace descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {INamespace} Namespace descriptor\n */\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\n    return util.toObject([\n        \"options\" , this.options,\n        \"nested\"  , arrayToJSON(this.nestedArray, toJSONOptions)\n    ]);\n};\n\n/**\n * Adds nested objects to this namespace from nested object descriptors.\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\n * @returns {Namespace} `this`\n */\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\n    var ns = this;\n    /* istanbul ignore else */\n    if (nestedJson) {\n        for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\n            nested = nestedJson[names[i]];\n            ns.add( // most to least likely\n                ( nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : nested.id !== undefined\n                ? Field.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    }\n    return this;\n};\n\n/**\n * Gets the nested object of the specified name.\n * @param {string} name Nested object name\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\n */\nNamespace.prototype.get = function get(name) {\n    return this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Gets the values of the nested {@link Enum|enum} of the specified name.\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\n * @param {string} name Nested enum name\n * @returns {Object.<string,number>} Enum values\n * @throws {Error} If there is no such enum\n */\nNamespace.prototype.getEnum = function getEnum(name) {\n    if (this.nested && this.nested[name] instanceof Enum)\n        return this.nested[name].values;\n    throw Error(\"no such enum: \" + name);\n};\n\n/**\n * Adds a nested object to this namespace.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name\n */\nNamespace.prototype.add = function add(object) {\n\n    if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof Enum || object instanceof Service || object instanceof Namespace))\n        throw TypeError(\"object must be a valid nested object\");\n\n    if (!this.nested)\n        this.nested = {};\n    else {\n        var prev = this.get(object.name);\n        if (prev) {\n            if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\n                // replace plain namespace but keep existing nested elements and options\n                var nested = prev.nestedArray;\n                for (var i = 0; i < nested.length; ++i)\n                    object.add(nested[i]);\n                this.remove(prev);\n                if (!this.nested)\n                    this.nested = {};\n                object.setOptions(prev.options, true);\n\n            } else\n                throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n        }\n    }\n    this.nested[object.name] = object;\n    object.onAdd(this);\n    return clearCache(this);\n};\n\n/**\n * Removes a nested object from this namespace.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this namespace\n */\nNamespace.prototype.remove = function remove(object) {\n\n    if (!(object instanceof ReflectionObject))\n        throw TypeError(\"object must be a ReflectionObject\");\n    if (object.parent !== this)\n        throw Error(object + \" is not a member of \" + this);\n\n    delete this.nested[object.name];\n    if (!Object.keys(this.nested).length)\n        this.nested = undefined;\n\n    object.onRemove(this);\n    return clearCache(this);\n};\n\n/**\n * Defines additial namespaces within this one if not yet existing.\n * @param {string|string[]} path Path to create\n * @param {*} [json] Nested types to create from JSON\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\n */\nNamespace.prototype.define = function define(path, json) {\n\n    if (util.isString(path))\n        path = path.split(\".\");\n    else if (!Array.isArray(path))\n        throw TypeError(\"illegal path\");\n    if (path && path.length && path[0] === \"\")\n        throw Error(\"path must be relative\");\n\n    var ptr = this;\n    while (path.length > 0) {\n        var part = path.shift();\n        if (ptr.nested && ptr.nested[part]) {\n            ptr = ptr.nested[part];\n            if (!(ptr instanceof Namespace))\n                throw Error(\"path conflicts with non-namespace objects\");\n        } else\n            ptr.add(ptr = new Namespace(part));\n    }\n    if (json)\n        ptr.addJSON(json);\n    return ptr;\n};\n\n/**\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\n * @returns {Namespace} `this`\n */\nNamespace.prototype.resolveAll = function resolveAll() {\n    var nested = this.nestedArray, i = 0;\n    while (i < nested.length)\n        if (nested[i] instanceof Namespace)\n            nested[i++].resolveAll();\n        else\n            nested[i++].resolve();\n    return this.resolve();\n};\n\n/**\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\n * @param {string|string[]} path Path to look up\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n */\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\n\n    /* istanbul ignore next */\n    if (typeof filterTypes === \"boolean\") {\n        parentAlreadyChecked = filterTypes;\n        filterTypes = undefined;\n    } else if (filterTypes && !Array.isArray(filterTypes))\n        filterTypes = [ filterTypes ];\n\n    if (util.isString(path) && path.length) {\n        if (path === \".\")\n            return this.root;\n        path = path.split(\".\");\n    } else if (!path.length)\n        return this;\n\n    // Start at root if path is absolute\n    if (path[0] === \"\")\n        return this.root.lookup(path.slice(1), filterTypes);\n\n    // Test if the first part matches any nested object, and if so, traverse if path contains more\n    var found = this.get(path[0]);\n    if (found) {\n        if (path.length === 1) {\n            if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)\n                return found;\n        } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true)))\n            return found;\n\n    // Otherwise try each nested namespace\n    } else\n        for (var i = 0; i < this.nestedArray.length; ++i)\n            if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true)))\n                return found;\n\n    // If there hasn't been a match, try again at the parent\n    if (this.parent === null || parentAlreadyChecked)\n        return null;\n    return this.parent.lookup(path, filterTypes);\n};\n\n/**\n * Looks up the reflection object at the specified path, relative to this namespace.\n * @name NamespaceBase#lookup\n * @function\n * @param {string|string[]} path Path to look up\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @variation 2\n */\n// lookup(path: string, [parentAlreadyChecked: boolean])\n\n/**\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type\n * @throws {Error} If `path` does not point to a type\n */\nNamespace.prototype.lookupType = function lookupType(path) {\n    var found = this.lookup(path, [ Type ]);\n    if (!found)\n        throw Error(\"no such type: \" + path);\n    return found;\n};\n\n/**\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Enum} Looked up enum\n * @throws {Error} If `path` does not point to an enum\n */\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\n    var found = this.lookup(path, [ Enum ]);\n    if (!found)\n        throw Error(\"no such Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type or enum\n * @throws {Error} If `path` does not point to a type or enum\n */\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\n    var found = this.lookup(path, [ Type, Enum ]);\n    if (!found)\n        throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\n    return found;\n};\n\n/**\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Service} Looked up service\n * @throws {Error} If `path` does not point to a service\n */\nNamespace.prototype.lookupService = function lookupService(path) {\n    var found = this.lookup(path, [ Service ]);\n    if (!found)\n        throw Error(\"no such Service '\" + path + \"' in \" + this);\n    return found;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nNamespace._configure = function(Type_, Service_, Enum_) {\n    Type    = Type_;\n    Service = Service_;\n    Enum    = Enum_;\n};\n","\"use strict\";\nmodule.exports = ReflectionObject;\n\nReflectionObject.className = \"ReflectionObject\";\n\nvar util = require(33);\n\nvar Root; // cyclic\n\n/**\n * Constructs a new reflection object instance.\n * @classdesc Base class of all reflection objects.\n * @constructor\n * @param {string} name Object name\n * @param {Object.<string,*>} [options] Declared options\n * @abstract\n */\nfunction ReflectionObject(name, options) {\n\n    if (!util.isString(name))\n        throw TypeError(\"name must be a string\");\n\n    if (options && !util.isObject(options))\n        throw TypeError(\"options must be an object\");\n\n    /**\n     * Options.\n     * @type {Object.<string,*>|undefined}\n     */\n    this.options = options; // toJSON\n\n    /**\n     * Unique name within its namespace.\n     * @type {string}\n     */\n    this.name = name;\n\n    /**\n     * Parent namespace.\n     * @type {Namespace|null}\n     */\n    this.parent = null;\n\n    /**\n     * Whether already resolved or not.\n     * @type {boolean}\n     */\n    this.resolved = false;\n\n    /**\n     * Comment text, if any.\n     * @type {string|null}\n     */\n    this.comment = null;\n\n    /**\n     * Defining file name.\n     * @type {string|null}\n     */\n    this.filename = null;\n}\n\nObject.defineProperties(ReflectionObject.prototype, {\n\n    /**\n     * Reference to the root namespace.\n     * @name ReflectionObject#root\n     * @type {Root}\n     * @readonly\n     */\n    root: {\n        get: function() {\n            var ptr = this;\n            while (ptr.parent !== null)\n                ptr = ptr.parent;\n            return ptr;\n        }\n    },\n\n    /**\n     * Full name including leading dot.\n     * @name ReflectionObject#fullName\n     * @type {string}\n     * @readonly\n     */\n    fullName: {\n        get: function() {\n            var path = [ this.name ],\n                ptr = this.parent;\n            while (ptr) {\n                path.unshift(ptr.name);\n                ptr = ptr.parent;\n            }\n            return path.join(\".\");\n        }\n    }\n});\n\n/**\n * Converts this reflection object to its descriptor representation.\n * @returns {Object.<string,*>} Descriptor\n * @abstract\n */\nReflectionObject.prototype.toJSON = /* istanbul ignore next */ function toJSON() {\n    throw Error(); // not implemented, shouldn't happen\n};\n\n/**\n * Called when this object is added to a parent.\n * @param {ReflectionObject} parent Parent added to\n * @returns {undefined}\n */\nReflectionObject.prototype.onAdd = function onAdd(parent) {\n    if (this.parent && this.parent !== parent)\n        this.parent.remove(this);\n    this.parent = parent;\n    this.resolved = false;\n    var root = parent.root;\n    if (root instanceof Root)\n        root._handleAdd(this);\n};\n\n/**\n * Called when this object is removed from a parent.\n * @param {ReflectionObject} parent Parent removed from\n * @returns {undefined}\n */\nReflectionObject.prototype.onRemove = function onRemove(parent) {\n    var root = parent.root;\n    if (root instanceof Root)\n        root._handleRemove(this);\n    this.parent = null;\n    this.resolved = false;\n};\n\n/**\n * Resolves this objects type references.\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.resolve = function resolve() {\n    if (this.resolved)\n        return this;\n    if (this.root instanceof Root)\n        this.resolved = true; // only if part of a root\n    return this;\n};\n\n/**\n * Gets an option value.\n * @param {string} name Option name\n * @returns {*} Option value or `undefined` if not set\n */\nReflectionObject.prototype.getOption = function getOption(name) {\n    if (this.options)\n        return this.options[name];\n    return undefined;\n};\n\n/**\n * Sets an option.\n * @param {string} name Option name\n * @param {*} value Option value\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n    if (!ifNotSet || !this.options || this.options[name] === undefined)\n        (this.options || (this.options = {}))[name] = value;\n    return this;\n};\n\n/**\n * Sets multiple options.\n * @param {Object.<string,*>} options Options to set\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n    if (options)\n        for (var keys = Object.keys(options), i = 0; i < keys.length; ++i)\n            this.setOption(keys[i], options[keys[i]], ifNotSet);\n    return this;\n};\n\n/**\n * Converts this instance to its string representation.\n * @returns {string} Class name[, space, full name]\n */\nReflectionObject.prototype.toString = function toString() {\n    var className = this.constructor.className,\n        fullName  = this.fullName;\n    if (fullName.length)\n        return className + \" \" + fullName;\n    return className;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nReflectionObject._configure = function(Root_) {\n    Root = Root_;\n};\n","\"use strict\";\nmodule.exports = OneOf;\n\n// extends ReflectionObject\nvar ReflectionObject = require(22);\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\n\nvar Field = require(15),\n    util  = require(33);\n\n/**\n * Constructs a new oneof instance.\n * @classdesc Reflected oneof.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Oneof name\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction OneOf(name, fieldNames, options, comment) {\n    if (!Array.isArray(fieldNames)) {\n        options = fieldNames;\n        fieldNames = undefined;\n    }\n    ReflectionObject.call(this, name, options);\n\n    /* istanbul ignore if */\n    if (!(fieldNames === undefined || Array.isArray(fieldNames)))\n        throw TypeError(\"fieldNames must be an Array\");\n\n    /**\n     * Field names that belong to this oneof.\n     * @type {string[]}\n     */\n    this.oneof = fieldNames || []; // toJSON, marker\n\n    /**\n     * Fields that belong to this oneof as an array for iteration.\n     * @type {Field[]}\n     * @readonly\n     */\n    this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n\n    /**\n     * Comment for this field.\n     * @type {string|null}\n     */\n    this.comment = comment;\n}\n\n/**\n * Oneof descriptor.\n * @interface IOneOf\n * @property {Array.<string>} oneof Oneof field names\n * @property {Object.<string,*>} [options] Oneof options\n */\n\n/**\n * Constructs a oneof from a oneof descriptor.\n * @param {string} name Oneof name\n * @param {IOneOf} json Oneof descriptor\n * @returns {OneOf} Created oneof\n * @throws {TypeError} If arguments are invalid\n */\nOneOf.fromJSON = function fromJSON(name, json) {\n    return new OneOf(name, json.oneof, json.options, json.comment);\n};\n\n/**\n * Converts this oneof to a oneof descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IOneOf} Oneof descriptor\n */\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , this.options,\n        \"oneof\"   , this.oneof,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Adds the fields of the specified oneof to the parent if not already done so.\n * @param {OneOf} oneof The oneof\n * @returns {undefined}\n * @inner\n * @ignore\n */\nfunction addFieldsToParent(oneof) {\n    if (oneof.parent)\n        for (var i = 0; i < oneof.fieldsArray.length; ++i)\n            if (!oneof.fieldsArray[i].parent)\n                oneof.parent.add(oneof.fieldsArray[i]);\n}\n\n/**\n * Adds a field to this oneof and removes it from its current parent, if any.\n * @param {Field} field Field to add\n * @returns {OneOf} `this`\n */\nOneOf.prototype.add = function add(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    if (field.parent && field.parent !== this.parent)\n        field.parent.remove(field);\n    this.oneof.push(field.name);\n    this.fieldsArray.push(field);\n    field.partOf = this; // field.parent remains null\n    addFieldsToParent(this);\n    return this;\n};\n\n/**\n * Removes a field from this oneof and puts it back to the oneof's parent.\n * @param {Field} field Field to remove\n * @returns {OneOf} `this`\n */\nOneOf.prototype.remove = function remove(field) {\n\n    /* istanbul ignore if */\n    if (!(field instanceof Field))\n        throw TypeError(\"field must be a Field\");\n\n    var index = this.fieldsArray.indexOf(field);\n\n    /* istanbul ignore if */\n    if (index < 0)\n        throw Error(field + \" is not a member of \" + this);\n\n    this.fieldsArray.splice(index, 1);\n    index = this.oneof.indexOf(field.name);\n\n    /* istanbul ignore else */\n    if (index > -1) // theoretical\n        this.oneof.splice(index, 1);\n\n    field.partOf = null;\n    return this;\n};\n\n/**\n * @override\n */\nOneOf.prototype.onAdd = function onAdd(parent) {\n    ReflectionObject.prototype.onAdd.call(this, parent);\n    var self = this;\n    // Collect present fields\n    for (var i = 0; i < this.oneof.length; ++i) {\n        var field = parent.get(this.oneof[i]);\n        if (field && !field.partOf) {\n            field.partOf = self;\n            self.fieldsArray.push(field);\n        }\n    }\n    // Add not yet present fields\n    addFieldsToParent(this);\n};\n\n/**\n * @override\n */\nOneOf.prototype.onRemove = function onRemove(parent) {\n    for (var i = 0, field; i < this.fieldsArray.length; ++i)\n        if ((field = this.fieldsArray[i]).parent)\n            field.parent.remove(field);\n    ReflectionObject.prototype.onRemove.call(this, parent);\n};\n\n/**\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\n * @typedef OneOfDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} oneofName OneOf name\n * @returns {undefined}\n */\n\n/**\n * OneOf decorator (TypeScript).\n * @function\n * @param {...string} fieldNames Field names\n * @returns {OneOfDecorator} Decorator function\n * @template T extends string\n */\nOneOf.d = function decorateOneOf() {\n    var fieldNames = new Array(arguments.length),\n        index = 0;\n    while (index < arguments.length)\n        fieldNames[index] = arguments[index++];\n    return function oneOfDecorator(prototype, oneofName) {\n        util.decorateType(prototype.constructor)\n            .add(new OneOf(oneofName, fieldNames));\n        Object.defineProperty(prototype, oneofName, {\n            get: util.oneOfGetter(fieldNames),\n            set: util.oneOfSetter(fieldNames)\n        });\n    };\n};\n","\"use strict\";\nmodule.exports = Reader;\n\nvar util      = require(35);\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = util.Buffer\n    ? function create_buffer_setup(buffer) {\n        return (Reader.create = function create_buffer(buffer) {\n            return util.Buffer.isBuffer(buffer)\n                ? new BufferReader(buffer)\n                /* istanbul ignore next */\n                : create_array(buffer);\n        })(buffer);\n    }\n    /* istanbul ignore next */\n    : create_array;\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n","\"use strict\";\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(24);\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = require(35);\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\n/* istanbul ignore else */\nif (util.Buffer)\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n","\"use strict\";\nmodule.exports = Root;\n\n// extends Namespace\nvar Namespace = require(21);\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\n\nvar Field   = require(15),\n    Enum    = require(14),\n    OneOf   = require(23),\n    util    = require(33);\n\nvar Type,   // cyclic\n    parse,  // might be excluded\n    common; // \"\n\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */\nfunction Root(options) {\n    Namespace.call(this, \"\", options);\n\n    /**\n     * Deferred extension fields.\n     * @type {Field[]}\n     */\n    this.deferred = [];\n\n    /**\n     * Resolved file names of loaded files.\n     * @type {string[]}\n     */\n    this.files = [];\n}\n\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Nameespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @returns {Root} Root namespace\n */\nRoot.fromJSON = function fromJSON(json, root) {\n    if (!root)\n        root = new Root();\n    if (json.options)\n        root.setOptions(json.options);\n    return root.addJSON(json.nested);\n};\n\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */\nRoot.prototype.resolvePath = util.path.resolve;\n\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} options Parse options\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.load = function load(filename, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = undefined;\n    }\n    var self = this;\n    if (!callback)\n        return util.asPromise(load, self, filename, options);\n\n    var sync = callback === SYNC; // undocumented\n\n    // Finishes loading by calling the callback (exactly once)\n    function finish(err, root) {\n        /* istanbul ignore if */\n        if (!callback)\n            return;\n        var cb = callback;\n        callback = null;\n        if (sync)\n            throw err;\n        cb(err, root);\n    }\n\t\n    // Bundled definition existence checking\n    function getBundledFileName(filename) {\n        var idx = filename.lastIndexOf(\"google/protobuf/\");\n        if (idx > -1) {\n            var altname = filename.substring(idx);\n            if (altname in common) return altname; \n        }\n        return null;\n    }\n\n    // Processes a single file\n    function process(filename, source) {\n        try {\n            if (util.isString(source) && source.charAt(0) === \"{\")\n                source = JSON.parse(source);\n            if (!util.isString(source))\n                self.setOptions(source.options).addJSON(source.nested);\n            else {\n                parse.filename = filename;\n                var parsed = parse(source, self, options),\n                    resolved,\n                    i = 0;\n                if (parsed.imports)\n                    for (; i < parsed.imports.length; ++i)\n                        if (resolved = (getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i])))\n                            fetch(resolved);\n                if (parsed.weakImports)\n                    for (i = 0; i < parsed.weakImports.length; ++i)\n                        if (resolved = (getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i])))\n                            fetch(resolved, true);\n            }\n        } catch (err) {\n            finish(err);\n        }\n        if (!sync && !queued)\n            finish(null, self); // only once anyway\n    }\n\n    // Fetches a single file\n    function fetch(filename, weak) {\n\n        // Skip if already loaded / attempted\n        if (self.files.indexOf(filename) > -1)\n            return;\n        self.files.push(filename);\n\n        // Shortcut bundled definitions\n        if (filename in common) {\n            if (sync)\n                process(filename, common[filename]);\n            else {\n                ++queued;\n                setTimeout(function() {\n                    --queued;\n                    process(filename, common[filename]);\n                });\n            }\n            return;\n        }\n\n        // Otherwise fetch from disk or network\n        if (sync) {\n            var source;\n            try {\n                source = util.fs.readFileSync(filename).toString(\"utf8\");\n            } catch (err) {\n                if (!weak)\n                    finish(err);\n                return;\n            }\n            process(filename, source);\n        } else {\n            ++queued;\n            util.fetch(filename, function(err, source) {\n                --queued;\n                /* istanbul ignore if */\n                if (!callback)\n                    return; // terminated meanwhile\n                if (err) {\n                    /* istanbul ignore else */\n                    if (!weak)\n                        finish(err);\n                    else if (!queued) // can't be covered reliably\n                        finish(null, self);\n                    return;\n                }\n                process(filename, source);\n            });\n        }\n    }\n    var queued = 0;\n\n    // Assembling the root namespace doesn't require working type\n    // references anymore, so we can load everything in parallel\n    if (util.isString(filename))\n        filename = [ filename ];\n    for (var i = 0, resolved; i < filename.length; ++i)\n        if (resolved = self.resolvePath(\"\", filename[i]))\n            fetch(resolved);\n\n    if (sync)\n        return self;\n    if (!queued)\n        finish(null, self);\n    return undefined;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Promise<Root>} Promise\n * @variation 3\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n * @function Root#loadSync\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n */\nRoot.prototype.loadSync = function loadSync(filename, options) {\n    if (!util.isNode)\n        throw Error(\"not supported\");\n    return this.load(filename, options, SYNC);\n};\n\n/**\n * @override\n */\nRoot.prototype.resolveAll = function resolveAll() {\n    if (this.deferred.length)\n        throw Error(\"unresolvable extensions: \" + this.deferred.map(function(field) {\n            return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n        }).join(\", \"));\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */\nfunction tryHandleExtension(root, field) {\n    var extendedType = field.parent.lookup(field.extend);\n    if (extendedType) {\n        var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n        sisterField.declaringField = field;\n        field.extensionField = sisterField;\n        extendedType.add(sisterField);\n        return true;\n    }\n    return false;\n}\n\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleAdd = function _handleAdd(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field (implies not part of a oneof) */ object.extend !== undefined && /* not already handled */ !object.extensionField)\n            if (!tryHandleExtension(this, object))\n                this.deferred.push(object);\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object.values; // expose enum values as property of its parent\n\n    } else if (!(object instanceof OneOf)) /* everything else is a namespace */ {\n\n        if (object instanceof Type) // Try to handle any deferred extensions\n            for (var i = 0; i < this.deferred.length;)\n                if (tryHandleExtension(this, this.deferred[i]))\n                    this.deferred.splice(i, 1);\n                else\n                    ++i;\n        for (var j = 0; j < /* initializes */ object.nestedArray.length; ++j) // recurse into the namespace\n            this._handleAdd(object._nestedArray[j]);\n        if (exposeRe.test(object.name))\n            object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n\n    // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n    // properties of namespaces just like static code does. This allows using a .d.ts generated for\n    // a static module with reflection-based solutions where the condition is met.\n};\n\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleRemove = function _handleRemove(object) {\n    if (object instanceof Field) {\n\n        if (/* an extension field */ object.extend !== undefined) {\n            if (/* already handled */ object.extensionField) { // remove its sister field\n                object.extensionField.parent.remove(object.extensionField);\n                object.extensionField = null;\n            } else { // cancel the extension\n                var index = this.deferred.indexOf(object);\n                /* istanbul ignore else */\n                if (index > -1)\n                    this.deferred.splice(index, 1);\n            }\n        }\n\n    } else if (object instanceof Enum) {\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose enum values\n\n    } else if (object instanceof Namespace) {\n\n        for (var i = 0; i < /* initializes */ object.nestedArray.length; ++i) // recurse into the namespace\n            this._handleRemove(object._nestedArray[i]);\n\n        if (exposeRe.test(object.name))\n            delete object.parent[object.name]; // unexpose namespaces\n\n    }\n};\n\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function(Type_, parse_, common_) {\n    Type   = Type_;\n    parse  = parse_;\n    common = common_;\n};\n","\"use strict\";\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n","\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(29);\n","\"use strict\";\nmodule.exports = Service;\n\nvar util = require(35);\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n","\"use strict\";\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = require(21);\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\n\nvar Method = require(20),\n    util   = require(33),\n    rpc    = require(28);\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Service methods.\n     * @type {Object.<string,Method>}\n     */\n    this.methods = {}; // toJSON, marker\n\n    /**\n     * Cached methods as an array.\n     * @type {Method[]|null}\n     * @private\n     */\n    this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n    var service = new Service(name, json.options);\n    /* istanbul ignore else */\n    if (json.methods)\n        for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)\n            service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n    if (json.nested)\n        service.addJSON(json.nested);\n    service.comment = json.comment;\n    return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\" , inherited && inherited.options || undefined,\n        \"methods\" , Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */ {},\n        \"nested\"  , inherited && inherited.nested || undefined,\n        \"comment\" , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n    get: function() {\n        return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n    }\n});\n\nfunction clearCache(service) {\n    service._methodsArray = null;\n    return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n    return this.methods[name]\n        || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n    var methods = this.methodsArray;\n    for (var i = 0; i < methods.length; ++i)\n        methods[i].resolve();\n    return Namespace.prototype.resolve.call(this);\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n\n    /* istanbul ignore if */\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Method) {\n        this.methods[object.name] = object;\n        object.parent = this;\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n    if (object instanceof Method) {\n\n        /* istanbul ignore if */\n        if (this.methods[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.methods[object.name];\n        object.parent = null;\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n    var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n    for (var i = 0, method; i < /* initializes */ this.methodsArray.length; ++i) {\n        var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n        var func=function(r,c) {\n            return function(m,q,s) {\n                return this.rpcCall(m,q,s,r,c);\n            };\n        };\n        rpcService[methodName] = function (m,q,s) {\n            return function (r,c){\n                return this.rpcCall(m,q,s,r,c);\n            };\n        };\n        // rpcService[methodName] = util.codegen([\"r\",\"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n        //     m: method,\n        //     q: method.resolvedRequestType.ctor,\n        //     s: method.resolvedResponseType.ctor\n        // });\n    }\n    return rpcService;\n};\n","\"use strict\";\nmodule.exports = Type;\n\n// extends Namespace\nvar Namespace = require(21);\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\n\nvar Enum      = require(14),\n    OneOf     = require(23),\n    Field     = require(15),\n    MapField  = require(18),\n    Service   = require(30),\n    Message   = require(19),\n    Reader    = require(24),\n    Writer    = require(38),\n    util      = require(33),\n    encoder   = require(13),\n    decoder   = require(12),\n    verifier  = require(36),\n    converter = require(11),\n    wrappers  = require(37);\n\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Type(name, options) {\n    Namespace.call(this, name, options);\n\n    /**\n     * Message fields.\n     * @type {Object.<string,Field>}\n     */\n    this.fields = {};  // toJSON, marker\n\n    /**\n     * Oneofs declared within this namespace, if any.\n     * @type {Object.<string,OneOf>}\n     */\n    this.oneofs = undefined; // toJSON\n\n    /**\n     * Extension ranges, if any.\n     * @type {number[][]}\n     */\n    this.extensions = undefined; // toJSON\n\n    /**\n     * Reserved ranges, if any.\n     * @type {Array.<number[]|string>}\n     */\n    this.reserved = undefined; // toJSON\n\n    /*?\n     * Whether this type is a legacy group.\n     * @type {boolean|undefined}\n     */\n    this.group = undefined; // toJSON\n\n    /**\n     * Cached fields by id.\n     * @type {Object.<number,Field>|null}\n     * @private\n     */\n    this._fieldsById = null;\n\n    /**\n     * Cached fields as an array.\n     * @type {Field[]|null}\n     * @private\n     */\n    this._fieldsArray = null;\n\n    /**\n     * Cached oneofs as an array.\n     * @type {OneOf[]|null}\n     * @private\n     */\n    this._oneofsArray = null;\n\n    /**\n     * Cached constructor.\n     * @type {Constructor<{}>}\n     * @private\n     */\n    this._ctor = null;\n}\n\nObject.defineProperties(Type.prototype, {\n\n    /**\n     * Message fields by id.\n     * @name Type#fieldsById\n     * @type {Object.<number,Field>}\n     * @readonly\n     */\n    fieldsById: {\n        get: function() {\n\n            /* istanbul ignore if */\n            if (this._fieldsById)\n                return this._fieldsById;\n\n            this._fieldsById = {};\n            for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\n                var field = this.fields[names[i]],\n                    id = field.id;\n\n                /* istanbul ignore if */\n                if (this._fieldsById[id])\n                    throw Error(\"duplicate id \" + id + \" in \" + this);\n\n                this._fieldsById[id] = field;\n            }\n            return this._fieldsById;\n        }\n    },\n\n    /**\n     * Fields of this message as an array for iteration.\n     * @name Type#fieldsArray\n     * @type {Field[]}\n     * @readonly\n     */\n    fieldsArray: {\n        get: function() {\n            return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n        }\n    },\n\n    /**\n     * Oneofs of this message as an array for iteration.\n     * @name Type#oneofsArray\n     * @type {OneOf[]}\n     * @readonly\n     */\n    oneofsArray: {\n        get: function() {\n            return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n        }\n    },\n\n    /**\n     * The registered constructor, if any registered, otherwise a generic constructor.\n     * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n     * @name Type#ctor\n     * @type {Constructor<{}>}\n     */\n    ctor: {\n        get: function() {\n            return this._ctor || (this.ctor = Type.generateConstructor(this)());\n        },\n        set: function(ctor) {\n\n            // Ensure proper prototype\n            var prototype = ctor.prototype;\n            if (!(prototype instanceof Message)) {\n                (ctor.prototype = new Message()).constructor = ctor;\n                util.merge(ctor.prototype, prototype);\n            }\n\n            // Classes and messages reference their reflected type\n            ctor.$type = ctor.prototype.$type = this;\n\n            // Mix in static methods\n            util.merge(ctor, Message, true);\n\n            this._ctor = ctor;\n\n            // Messages have non-enumerable default values on their prototype\n            var i = 0;\n            for (; i < /* initializes */ this.fieldsArray.length; ++i)\n                this._fieldsArray[i].resolve(); // ensures a proper value\n\n            // Messages have non-enumerable getters and setters for each virtual oneof field\n            var ctorProperties = {};\n            for (i = 0; i < /* initializes */ this.oneofsArray.length; ++i)\n                ctorProperties[this._oneofsArray[i].resolve().name] = {\n                    get: util.oneOfGetter(this._oneofsArray[i].oneof),\n                    set: util.oneOfSetter(this._oneofsArray[i].oneof)\n                };\n            if (i)\n                Object.defineProperties(ctor.prototype, ctorProperties);\n        }\n    }\n});\n\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nType.generateConstructor = function generateConstructor(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    return function () {\n        var func=function (p) {\n            for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\n                if ((field = mtype._fieldsArray[i]).map)\n                    this[field.name]={};\n                else if (field.repeated)\n                    this[field.name]=[];\n            if(p)for(var ks=Object.keys(p),j=0;j<ks.length;++j)if(p[ks[j]]!=null)\n                this[ks[j]]=p[ks[j]];\n        };\n        return func;\n    };\n    // var gen = util.codegen([\"p\"], mtype.name);\n    // // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n    // for (var i = 0, field; i < mtype.fieldsArray.length; ++i)\n    //     if ((field = mtype._fieldsArray[i]).map) gen\n    //         (\"this%s={}\", util.safeProp(field.name));\n    //     else if (field.repeated) gen\n    //         (\"this%s=[]\", util.safeProp(field.name));\n    // return gen\n    // (\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n    //     (\"this[ks[i]]=p[ks[i]]\");\n    /* eslint-enable no-unexpected-multiline */\n};\n\nfunction clearCache(type) {\n    type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n    delete type.encode;\n    delete type.decode;\n    delete type.verify;\n    return type;\n}\n\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {number[][]} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */\n\n/**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @returns {Type} Created message type\n */\nType.fromJSON = function fromJSON(name, json) {\n    var type = new Type(name, json.options);\n    type.extensions = json.extensions;\n    type.reserved = json.reserved;\n    var names = Object.keys(json.fields),\n        i = 0;\n    for (; i < names.length; ++i)\n        type.add(\n            ( typeof json.fields[names[i]].keyType !== \"undefined\"\n            ? MapField.fromJSON\n            : Field.fromJSON )(names[i], json.fields[names[i]])\n        );\n    if (json.oneofs)\n        for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)\n            type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n    if (json.nested)\n        for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\n            var nested = json.nested[names[i]];\n            type.add( // most to least likely\n                ( nested.id !== undefined\n                ? Field.fromJSON\n                : nested.fields !== undefined\n                ? Type.fromJSON\n                : nested.values !== undefined\n                ? Enum.fromJSON\n                : nested.methods !== undefined\n                ? Service.fromJSON\n                : Namespace.fromJSON )(names[i], nested)\n            );\n        }\n    if (json.extensions && json.extensions.length)\n        type.extensions = json.extensions;\n    if (json.reserved && json.reserved.length)\n        type.reserved = json.reserved;\n    if (json.group)\n        type.group = true;\n    if (json.comment)\n        type.comment = json.comment;\n    return type;\n};\n\n/**\n * Converts this message type to a message type descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IType} Message type descriptor\n */\nType.prototype.toJSON = function toJSON(toJSONOptions) {\n    var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n    var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n    return util.toObject([\n        \"options\"    , inherited && inherited.options || undefined,\n        \"oneofs\"     , Namespace.arrayToJSON(this.oneofsArray, toJSONOptions),\n        \"fields\"     , Namespace.arrayToJSON(this.fieldsArray.filter(function(obj) { return !obj.declaringField; }), toJSONOptions) || {},\n        \"extensions\" , this.extensions && this.extensions.length ? this.extensions : undefined,\n        \"reserved\"   , this.reserved && this.reserved.length ? this.reserved : undefined,\n        \"group\"      , this.group || undefined,\n        \"nested\"     , inherited && inherited.nested || undefined,\n        \"comment\"    , keepComments ? this.comment : undefined\n    ]);\n};\n\n/**\n * @override\n */\nType.prototype.resolveAll = function resolveAll() {\n    var fields = this.fieldsArray, i = 0;\n    while (i < fields.length)\n        fields[i++].resolve();\n    var oneofs = this.oneofsArray; i = 0;\n    while (i < oneofs.length)\n        oneofs[i++].resolve();\n    return Namespace.prototype.resolveAll.call(this);\n};\n\n/**\n * @override\n */\nType.prototype.get = function get(name) {\n    return this.fields[name]\n        || this.oneofs && this.oneofs[name]\n        || this.nested && this.nested[name]\n        || null;\n};\n\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */\nType.prototype.add = function add(object) {\n\n    if (this.get(object.name))\n        throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n\n    if (object instanceof Field && object.extend === undefined) {\n        // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n        // The root object takes care of adding distinct sister-fields to the respective extended\n        // type instead.\n\n        // avoids calling the getter if not absolutely necessary because it's called quite frequently\n        if (this._fieldsById ? /* istanbul ignore next */ this._fieldsById[object.id] : this.fieldsById[object.id])\n            throw Error(\"duplicate id \" + object.id + \" in \" + this);\n        if (this.isReservedId(object.id))\n            throw Error(\"id \" + object.id + \" is reserved in \" + this);\n        if (this.isReservedName(object.name))\n            throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n\n        if (object.parent)\n            object.parent.remove(object);\n        this.fields[object.name] = object;\n        object.message = this;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n        if (!this.oneofs)\n            this.oneofs = {};\n        this.oneofs[object.name] = object;\n        object.onAdd(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */\nType.prototype.remove = function remove(object) {\n    if (object instanceof Field && object.extend === undefined) {\n        // See Type#add for the reason why extension fields are excluded here.\n\n        /* istanbul ignore if */\n        if (!this.fields || this.fields[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.fields[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    if (object instanceof OneOf) {\n\n        /* istanbul ignore if */\n        if (!this.oneofs || this.oneofs[object.name] !== object)\n            throw Error(object + \" is not a member of \" + this);\n\n        delete this.oneofs[object.name];\n        object.parent = null;\n        object.onRemove(this);\n        return clearCache(this);\n    }\n    return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedId = function isReservedId(id) {\n    return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedName = function isReservedName(name) {\n    return Namespace.isReservedName(this.reserved, name);\n};\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */\nType.prototype.create = function create(properties) {\n    return new this.ctor(properties);\n};\n\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */\nType.prototype.setup = function setup() {\n    // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n    // multiple times (V8, soft-deopt prototype-check).\n\n    var fullName = this.fullName,\n        types    = [];\n    for (var i = 0; i < /* initializes */ this.fieldsArray.length; ++i)\n        types.push(this._fieldsArray[i].resolve().resolvedType);\n\n    // Replace setup methods with type-specific generated functions\n    this.encode = encoder(this)({\n        Writer : Writer,\n        types  : types,\n        util   : util\n    });\n    this.decode = decoder(this)({\n        Reader : Reader,\n        types  : types,\n        util   : util\n    });\n    this.verify = verifier(this)({\n        types : types,\n        util  : util\n    });\n    this.fromObject = converter.fromObject(this)({\n        types : types,\n        util  : util\n    });\n    this.toObject = converter.toObject(this)({\n        types : types,\n        util  : util\n    });\n\n    // Inject custom wrappers for common types\n    var wrapper = wrappers[fullName];\n    if (wrapper) {\n        var originalThis = Object.create(this);\n        // if (wrapper.fromObject) {\n            originalThis.fromObject = this.fromObject;\n            this.fromObject = wrapper.fromObject.bind(originalThis);\n        // }\n        // if (wrapper.toObject) {\n            originalThis.toObject = this.toObject;\n            this.toObject = wrapper.toObject.bind(originalThis);\n        // }\n    }\n\n    return this;\n};\n\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encode = function encode_setup(message, writer) {\n    return this.setup().encode(message, writer); // overrides this method\n};\n\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */\nType.prototype.decode = function decode_setup(reader, length) {\n    return this.setup().decode(reader, length); // overrides this method\n};\n\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof Reader))\n        reader = Reader.create(reader);\n    return this.decode(reader, reader.uint32());\n};\n\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */\nType.prototype.verify = function verify_setup(message) {\n    return this.setup().verify(message); // overrides this method\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */\nType.prototype.fromObject = function fromObject(object) {\n    return this.setup().fromObject(object);\n};\n\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `Number` (the global types).\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\n * @property {Function} [enums] Enum value conversion type.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */\nType.prototype.toObject = function toObject(message, options) {\n    return this.setup().toObject(message, options);\n};\n\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */\n\n/**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */\nType.d = function decorateType(typeName) {\n    return function typeDecorator(target) {\n        util.decorateType(target, typeName);\n    };\n};\n","\"use strict\";\n\n/**\n * Common type constants.\n * @namespace\n */\nvar types = exports;\n\nvar util = require(33);\n\nvar s = [\n    \"double\",   // 0\n    \"float\",    // 1\n    \"int32\",    // 2\n    \"uint32\",   // 3\n    \"sint32\",   // 4\n    \"fixed32\",  // 5\n    \"sfixed32\", // 6\n    \"int64\",    // 7\n    \"uint64\",   // 8\n    \"sint64\",   // 9\n    \"fixed64\",  // 10\n    \"sfixed64\", // 11\n    \"bool\",     // 12\n    \"string\",   // 13\n    \"bytes\"     // 14\n];\n\nfunction bake(values, offset) {\n    var i = 0, o = {};\n    offset |= 0;\n    while (i < values.length) o[s[i + offset]] = values[i++];\n    return o;\n}\n\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */\ntypes.basic = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2,\n    /* bytes    */ 2\n]);\n\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */\ntypes.defaults = bake([\n    /* double   */ 0,\n    /* float    */ 0,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 0,\n    /* sfixed32 */ 0,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 0,\n    /* sfixed64 */ 0,\n    /* bool     */ false,\n    /* string   */ \"\",\n    /* bytes    */ util.emptyArray,\n    /* message  */ null\n]);\n\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */\ntypes.long = bake([\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1\n], 7);\n\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */\ntypes.mapKey = bake([\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0,\n    /* string   */ 2\n], 2);\n\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */\ntypes.packed = bake([\n    /* double   */ 1,\n    /* float    */ 5,\n    /* int32    */ 0,\n    /* uint32   */ 0,\n    /* sint32   */ 0,\n    /* fixed32  */ 5,\n    /* sfixed32 */ 5,\n    /* int64    */ 0,\n    /* uint64   */ 0,\n    /* sint64   */ 0,\n    /* fixed64  */ 1,\n    /* sfixed64 */ 1,\n    /* bool     */ 0\n]);\n","\"use strict\";\n\n/**\n * Various utility functions.\n * @namespace\n */\nvar util = module.exports = require(35);\n\nvar roots = require(27);\n\nvar Type, // cyclic\n    Enum;\n\nutil.codegen = require(3);\nutil.fetch   = require(5);\nutil.path    = require(8);\n\n/**\n * Node's fs module if available.\n * @type {Object.<string,*>}\n */\nutil.fs = util.inquire(\"fs\");\n\n/**\n * Converts an object's values to an array.\n * @param {Object.<string,*>} object Object to convert\n * @returns {Array.<*>} Converted array\n */\nutil.toArray = function toArray(object) {\n    if (object) {\n        var keys  = Object.keys(object),\n            array = new Array(keys.length),\n            index = 0;\n        while (index < keys.length)\n            array[index] = object[keys[index++]];\n        return array;\n    }\n    return [];\n};\n\n/**\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\n * @param {Array.<*>} array Array to convert\n * @returns {Object.<string,*>} Converted object\n */\nutil.toObject = function toObject(array) {\n    var object = {},\n        index  = 0;\n    while (index < array.length) {\n        var key = array[index++],\n            val = array[index++];\n        if (val !== undefined)\n            object[key] = val;\n    }\n    return object;\n};\n\nvar safePropBackslashRe = /\\\\/g,\n    safePropQuoteRe     = /\"/g;\n\n/**\n * Tests whether the specified name is a reserved word in JS.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nutil.isReserved = function isReserved(name) {\n    return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\n};\n\n/**\n * Returns a safe property accessor for the specified property name.\n * @param {string} prop Property name\n * @returns {string} Safe accessor\n */\nutil.safeProp = function safeProp(prop) {\n    if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop))\n        return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\n    return \".\" + prop;\n};\n\n/**\n * Converts the first character of a string to upper case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.ucFirst = function ucFirst(str) {\n    return str.charAt(0).toUpperCase() + str.substring(1);\n};\n\nvar camelCaseRe = /_([a-z])/g;\n\n/**\n * Converts a string to camel case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.camelCase = function camelCase(str) {\n    return str.substring(0, 1)\n         + str.substring(1)\n               .replace(camelCaseRe, function($0, $1) { return $1.toUpperCase(); });\n};\n\n/**\n * Compares reflected fields by id.\n * @param {Field} a First field\n * @param {Field} b Second field\n * @returns {number} Comparison value\n */\nutil.compareFieldsById = function compareFieldsById(a, b) {\n    return a.id - b.id;\n};\n\n/**\n * Decorator helper for types (TypeScript).\n * @param {Constructor<T>} ctor Constructor function\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {Type} Reflected type\n * @template T extends Message<T>\n * @property {Root} root Decorators root\n */\nutil.decorateType = function decorateType(ctor, typeName) {\n\n    /* istanbul ignore if */\n    if (ctor.$type) {\n        if (typeName && ctor.$type.name !== typeName) {\n            util.decorateRoot.remove(ctor.$type);\n            ctor.$type.name = typeName;\n            util.decorateRoot.add(ctor.$type);\n        }\n        return ctor.$type;\n    }\n\n    /* istanbul ignore next */\n    if (!Type)\n        Type = require(31);\n\n    var type = new Type(typeName || ctor.name);\n    util.decorateRoot.add(type);\n    type.ctor = ctor; // sets up .encode, .decode etc.\n    Object.defineProperty(ctor, \"$type\", { value: type, enumerable: false });\n    Object.defineProperty(ctor.prototype, \"$type\", { value: type, enumerable: false });\n    return type;\n};\n\nvar decorateEnumIndex = 0;\n\n/**\n * Decorator helper for enums (TypeScript).\n * @param {Object} object Enum object\n * @returns {Enum} Reflected enum\n */\nutil.decorateEnum = function decorateEnum(object) {\n\n    /* istanbul ignore if */\n    if (object.$type)\n        return object.$type;\n\n    /* istanbul ignore next */\n    if (!Enum)\n        Enum = require(14);\n\n    var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\n    util.decorateRoot.add(enm);\n    Object.defineProperty(object, \"$type\", { value: enm, enumerable: false });\n    return enm;\n};\n\n/**\n * Decorator root (TypeScript).\n * @name util.decorateRoot\n * @type {Root}\n * @readonly\n */\nObject.defineProperty(util, \"decorateRoot\", {\n    get: function() {\n        return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(26))());\n    }\n});\n","\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(35);\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n","\"use strict\";\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(1);\n\n// converts to / from base64 encoded strings\nutil.base64 = require(2);\n\n// base class of rpc.Service\nutil.EventEmitter = require(4);\n\n// float handling accross browsers\nutil.float = require(6);\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(7);\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(10);\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(9);\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(34);\n\n// global object reference\nutil.global = typeof window !== \"undefined\" && window\n           || typeof global !== \"undefined\" && global\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n * @const\n */\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n","\"use strict\";\nmodule.exports = verifier;\n\nvar Enum      = require(14),\n    util      = require(33);\n\nfunction invalid(field, expected) {\n    return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\"+field.keyType+\"}\" : \"\") + \" expected\";\n}\n\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @ignore\n */\nfunction genVerifyValue(field, fieldIndex, ref, $types, $util) {\n    /* eslint-disable no-unexpected-multiline */\n    if (field.resolvedType) {\n        if (field.resolvedType instanceof Enum) {\n            var keys = Object.keys(field.resolvedType.values);\n            if(keys.indexOf(ref) < 0 )\n                return invalid(field, \"enum value\");\n        } else {\n                var e=$types[fieldIndex].verify(ref);\n                if(e)\n                    return field.name + \".\" + e;\n        }\n    } else {\n        switch (field.type) {\n            case \"int32\":\n            case \"uint32\":\n            case \"sint32\":\n            case \"fixed32\":\n            case \"sfixed32\":\n                if(!$util.isInteger(ref))\n                    return invalid(field, \"integer\");\n                break;\n            case \"int64\":\n            case \"uint64\":\n            case \"sint64\":\n            case \"fixed64\":\n            case \"sfixed64\":\n                if(!$util.isInteger(ref)&&!(ref&&$util.isInteger(ref.low)&&$util.isInteger(ref.high)))\n                    return invalid(field, \"integer|Long\");\n                break;\n            case \"float\":\n            case \"double\":\n                if(typeof ref!==\"number\")\n                    return invalid(field, \"number\");\n                break;\n            case \"bool\":\n                if(typeof ref!==\"boolean\")\n                    return invalid(field, \"boolean\");\n                break;\n            case \"string\":\n                if(!$util.isString(ref))\n                    return invalid(field, \"string\");\n                break;\n            case \"bytes\":\n                if(!(ref&&typeof ref.length===\"number\"||$util.isString(ref)))\n                    return invalid(field, \"buffer\");\n                break;\n        }\n    }\n    return null;\n    // if (field.resolvedType) {\n    //     if (field.resolvedType instanceof Enum) { gen\n    //     (\"switch(%s){\", ref)\n    //     (\"default:\")\n    //     (\"return%j\", invalid(field, \"enum value\"));\n    //         for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen\n    //         (\"case %i:\", field.resolvedType.values[keys[j]]);\n    //         gen\n    //         (\"break\")\n    //         (\"}\");\n    //     } else {\n    //         gen\n    //         (\"{\")\n    //         (\"var e=types[%i].verify(%s);\", fieldIndex, ref)\n    //         (\"if(e)\")\n    //         (\"return%j+e\", field.name + \".\")\n    //         (\"}\");\n    //     }\n    // } else {\n    //     switch (field.type) {\n    //         case \"int32\":\n    //         case \"uint32\":\n    //         case \"sint32\":\n    //         case \"fixed32\":\n    //         case \"sfixed32\": gen\n    //         (\"if(!util.isInteger(%s))\", ref)\n    //         (\"return%j\", invalid(field, \"integer\"));\n    //             break;\n    //         case \"int64\":\n    //         case \"uint64\":\n    //         case \"sint64\":\n    //         case \"fixed64\":\n    //         case \"sfixed64\": gen\n    //         (\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)\n    //         (\"return%j\", invalid(field, \"integer|Long\"));\n    //             break;\n    //         case \"float\":\n    //         case \"double\": gen\n    //         (\"if(typeof %s!==\\\"number\\\")\", ref)\n    //         (\"return%j\", invalid(field, \"number\"));\n    //             break;\n    //         case \"bool\": gen\n    //         (\"if(typeof %s!==\\\"boolean\\\")\", ref)\n    //         (\"return%j\", invalid(field, \"boolean\"));\n    //             break;\n    //         case \"string\": gen\n    //         (\"if(!util.isString(%s))\", ref)\n    //         (\"return%j\", invalid(field, \"string\"));\n    //             break;\n    //         case \"bytes\": gen\n    //         (\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)\n    //         (\"return%j\", invalid(field, \"buffer\"));\n    //             break;\n    //     }\n    // }\n    // return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyKey(field, ref, $types, $util) {\n    /* eslint-disable no-unexpected-multiline */\n    switch (field.keyType) {\n        case \"int32\":\n        case \"uint32\":\n        case \"sint32\":\n        case \"fixed32\":\n        case \"sfixed32\":\n            if(!$util.key32Re.test(ref))\n                return invalid(field, \"integer key\");\n            break;\n        case \"int64\":\n        case \"uint64\":\n        case \"sint64\":\n        case \"fixed64\":\n        case \"sfixed64\":\n            if(!$util.key64Re.test(ref)) // see comment above: x is ok, d is not\n                return invalid(field, \"integer|Long key\");\n            break;\n        case \"bool\":\n            if(!$util.key2Re.test(ref))\n                return invalid(field, \"boolean key\");\n            break;\n    }\n    return null;\n    // switch (field.keyType) {\n    //     case \"int32\":\n    //     case \"uint32\":\n    //     case \"sint32\":\n    //     case \"fixed32\":\n    //     case \"sfixed32\": gen\n    //     (\"if(!util.key32Re.test(%s))\", ref)\n    //     (\"return%j\", invalid(field, \"integer key\"));\n    //         break;\n    //     case \"int64\":\n    //     case \"uint64\":\n    //     case \"sint64\":\n    //     case \"fixed64\":\n    //     case \"sfixed64\": gen\n    //     (\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n    //     (\"return%j\", invalid(field, \"integer|Long key\"));\n    //         break;\n    //     case \"bool\": gen\n    //     (\"if(!util.key2Re.test(%s))\", ref)\n    //     (\"return%j\", invalid(field, \"boolean key\"));\n    //         break;\n    // }\n    // return gen;\n    /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction verifier(mtype) {\n    /* eslint-disable no-unexpected-multiline */\n    return function (arg) {\n        var $types = arg.types;\n        var $util = arg.util;\n        var func = function (m) {\n            if(typeof m!==\"object\"||m===null)\n                return \"object expected\";\n            var oneofs = mtype.oneofsArray,\n                seenFirstField = {};\n            if (oneofs.length)\n            var p={};\n            var res;\n            for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n                var field = mtype._fieldsArray[i].resolve(),\n                    ref   = m[field.name];\n\n                if (field.optional)\n                    if(ref!=null&&m.hasOwnProperty(field.name)){\n\n                // map fields\n                if (field.map) {\n                    if(!$util.isObject(ref))\n                        return invalid(field, \"object\");\n                    var k=Object.keys(ref);\n                    for(var _i=0;_i<k.length;++_i){\n                        if(res = genVerifyKey(field, k[_i], $types, $util))\n                            return res;\n                        if(res = genVerifyValue(field, _i, ref[k[_i]], $types, $util))\n                            return res;\n                    }\n\n                // repeated fields\n                } else if (field.repeated) {\n                    if(!Array.isArray(ref))\n                        return invalid(field, \"array\");\n                    for(var __i=0;__i<ref.length;++__i){\n                        if(res = genVerifyValue(field, __i, ref[__i], $types, $util))\n                            return res;\n                    }\n\n                // required or present fields\n                } else {\n                    if (field.partOf) {\n                        var oneofProp = field.partOf.name;\n                        if (seenFirstField[field.partOf.name] === 1)\n                    if(p[oneofProp]===1)\n                        return field.partOf.name + \": multiple values\";\n                        seenFirstField[field.partOf.name] = 1;\n                    p[oneofProp]=1;\n                    }\n                    if(res = genVerifyValue(field, i, ref, $types, $util))\n                        return res;\n                }\n                }\n            }\n            return null;\n        };\n        return func;\n    };\n    // var gen = util.codegen([\"m\"], mtype.name + \"$verify\")\n    // (\"if(typeof m!==\\\"object\\\"||m===null)\")\n    //     (\"return%j\", \"object expected\");\n    // var oneofs = mtype.oneofsArray,\n    //     seenFirstField = {};\n    // if (oneofs.length) gen\n    // (\"var p={}\");\n    //\n    // for (var i = 0; i < /* initializes */ mtype.fieldsArray.length; ++i) {\n    //     var field = mtype._fieldsArray[i].resolve(),\n    //         ref   = \"m\" + util.safeProp(field.name);\n    //\n    //     if (field.optional) gen\n    //     (\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n    //\n    //     // map fields\n    //     if (field.map) { gen\n    //         (\"if(!util.isObject(%s))\", ref)\n    //             (\"return%j\", invalid(field, \"object\"))\n    //         (\"var k=Object.keys(%s)\", ref)\n    //         (\"for(var i=0;i<k.length;++i){\");\n    //             genVerifyKey(gen, field, \"k[i]\");\n    //             genVerifyValue(gen, field, i, ref + \"[k[i]]\")\n    //         (\"}\");\n    //\n    //     // repeated fields\n    //     } else if (field.repeated) { gen\n    //         (\"if(!Array.isArray(%s))\", ref)\n    //             (\"return%j\", invalid(field, \"array\"))\n    //         (\"for(var i=0;i<%s.length;++i){\", ref);\n    //             genVerifyValue(gen, field, i, ref + \"[i]\")\n    //         (\"}\");\n    //\n    //     // required or present fields\n    //     } else {\n    //         if (field.partOf) {\n    //             var oneofProp = util.safeProp(field.partOf.name);\n    //             if (seenFirstField[field.partOf.name] === 1) gen\n    //         (\"if(p%s===1)\", oneofProp)\n    //             (\"return%j\", field.partOf.name + \": multiple values\");\n    //             seenFirstField[field.partOf.name] = 1;\n    //             gen\n    //         (\"p%s=1\", oneofProp);\n    //         }\n    //         genVerifyValue(gen, field, i, ref);\n    //     }\n    //     if (field.optional) gen\n    //     (\"}\");\n    // }\n    // return gen\n    // (\"return null\");\n    /* eslint-enable no-unexpected-multiline */\n}","\"use strict\";\n\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */\nvar wrappers = exports;\n\nvar Message = require(19);\n\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */\n\n/**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */\n\n/**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */\n\n// Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n\n    fromObject: function(object) {\n\n        // unwrap value type if mapped\n        if (object && object[\"@type\"]) {\n            var type = this.lookup(object[\"@type\"]);\n            /* istanbul ignore else */\n            if (type) {\n                // type_url does not accept leading \".\"\n                var type_url = object[\"@type\"].charAt(0) === \".\" ?\n                    object[\"@type\"].substr(1) : object[\"@type\"];\n                // type_url prefix is optional, but path seperator is required\n                return this.create({\n                    type_url: \"/\" + type_url,\n                    value: type.encode(type.fromObject(object)).finish()\n                });\n            }\n        }\n\n        return this.fromObject(object);\n    },\n\n    toObject: function(message, options) {\n\n        // decode value if requested and unmapped\n        if (options && options.json && message.type_url && message.value) {\n            // Only use fully qualified type name after the last '/'\n            var name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n            var type = this.lookup(name);\n            /* istanbul ignore else */\n            if (type)\n                message = type.decode(message.value);\n        }\n\n        // wrap value if unmapped\n        if (!(message instanceof this.ctor) && message instanceof Message) {\n            var object = message.$type.toObject(message, options);\n            object[\"@type\"] = message.$type.fullName;\n            return object;\n        }\n\n        return this.toObject(message, options);\n    }\n};\n","\"use strict\";\nmodule.exports = Writer;\n\nvar util      = require(35);\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = util.Buffer\n    ? function create_buffer_setup() {\n        return (Writer.create = function create_buffer() {\n            return new BufferWriter();\n        })();\n    }\n    /* istanbul ignore next */\n    : function create_array() {\n        return new Writer();\n    };\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n};\n","\"use strict\";\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(38);\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = require(35);\n\nvar Buffer = util.Buffer;\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Buffer} Buffer\n */\nBufferWriter.alloc = function alloc_buffer(size) {\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\n};\n\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\n    ? function writeBytesBuffer_set(val, buf, pos) {\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n                           // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytesBuffer_copy(val, buf, pos) {\n        if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n        else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n    };\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else\n        buf.utf8Write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n"],"sourceRoot":"."}